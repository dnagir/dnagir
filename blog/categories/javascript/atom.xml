<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | Art Of Programming]]></title>
  <link href="http://ApproachE.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://ApproachE.com/"/>
  <updated>2012-03-06T09:23:25+11:00</updated>
  <id>http://ApproachE.com/</id>
  <author>
    <name><![CDATA[Dmytrii Nagirniak]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[KnockoutJS Validations Screencast]]></title>
    <link href="http://ApproachE.com/blog/knockoutjs-validations-video/"/>
    <updated>2011-12-22T20:31:00+11:00</updated>
    <id>http://ApproachE.com/blog/knockoutjs-validations-video</id>
    <content type="html"><![CDATA[<div class='post'>
<div>
If you wonder how you can use KnockoutJS with Rails in a similar way to Backbone.js or Spine.js then <a href="http://www.youtube.com/watch?v=cJzQl-bpmUI">watch the video</a>. It also shows how easy it is to apply client side validations that work alongsite with the server-side validations.<br />
<br />

<iframe width="560" height="315" src="http://www.youtube.com/embed/cJzQl-bpmUI?hd=1" frameborder="0" allowfullscreen></iframe>

<div>
Have a look at the <a href="https://github.com/dnagir/knockout-rails">knockout-rails</a> project for more details.
</div>

</div></div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Dmytrii Nagirniak</div>
<div class='content'>
This is actually <a href="https://gist.github.com/9ca5dce0524927d69655" rel="nofollow">one of the options</a> of validating in the background: <br /><br />It doesn&#39;t include the bindings, but gives idea how it can be done. Easier than I thought actually.</div>
</div>
<div class='comment'>
<div class='author'>Dmytrii Nagirniak</div>
<div class='content'>
Pre-validating on the server can technically be done with the Model Events. But it&#39;s not supported out of the box.<br /><br />It is a good idea, but there&#39;s a bit more complexity involved on both client and server. But I&#39;ll gladly accept pull requests to knockout-rails if somebody needs to support that.</div>
</div>
<div class='comment'>
<div class='author'>Aleksey Gureiev</div>
<div class='content'>
This comment has been removed by the author.</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Plugin with Tested Assets Screencast]]></title>
    <link href="http://ApproachE.com/blog/rails-plugin-with-tested-assets/"/>
    <updated>2011-11-19T20:47:00+11:00</updated>
    <id>http://ApproachE.com/blog/rails-plugin-with-tested-assets</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">
Some of the most valuable things you can learn are not written in books, not shown in the presentations and demos. Those come from seeing how <i>others</i> work.<br />
<br />
How do they do all those small things? What tricks do they have? How would they approach that problem?<br />
<br />
Unfortunately, I can't remember seeing people sharing the way they actually work (unless they pair). I want to see what mistakes they make, how they fix those, how they try to come up with a word erasing a line 10 times.<br />
I believe all this is of a great value for a lot of us.<br />
<br />
What I described is <i>partially</i>&nbsp;done by PeepCode's Play By Play series and Tekpub. Those are amazing (usually). But that's not exactly what I am after. Those screencasts are high quality, polished and prepared ones. YOU are NOT featuring there. I want to see YOU there. All of you, guys.<br />
<br />
<br />
So I decided to make a first step (or maybe not so) and screencast myself while working on a Rails Plugin.<br />
<br />
This is mostly real-time work. You'll see how I fail, you'll spot the mistakes I've done and did not even notice, you'll see how I write README. And, most importantly, you will hopefully see some of the things that will help <i>yourself</i>.<br />
<br />
This video features the following tools/technologies:<br />
<br />
<ul style="text-align: left;">
<li>Ruby, Ruby On Rails</li>
<li>CoffeeScript</li>
<li>SASS</li>
<li>Git, Github</li>
<li>Vim (MacVim and Terminal)</li>
<li>Jasmine and basic testing of JavaScript and even CSS assets</li>
<li>etc</li>
</ul>
<div>
Additionally, before watching, make sure you Turn On the Volume. Rare person doesn't like the music that my wife helped me prepare. Even if you don't not like the video, you should like the music :)</div>
<div>
<br /></div>
<div>
I hope you enjoy it. <strong>UPDATE: Please watch it in full screen as the quality is lower than I expected.</strong>
</div>
<div>
<br /></div>
<div>
<br /></div>
<div>

<iframe width="560" height="315" src="http://www.youtube.com/embed/MWvLofLz04k?hd=1" frameborder="0" allowfullscreen></iframe>


</div>
<div>
<br /></div>
<div>
<br /></div>
<div>
<br /></div>
<div>
P.S.: Screencasting is really hard. And that's my first. So&nbsp;apologies&nbsp;if something isn't in-place.</div>
<div>
(If you can't see the video here, open it on&nbsp;<a href="http://vimeo.com/32357445">Vimeo</a>. Alternatively, try <a href="http://www.youtube.com/watch?v=MWvLofLz04k">YouTube</a> - it should work with HTML5-only browser).</div>
<br />
<br />
<br />
<br /></div></div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Dmytrii Nagirniak</div>
<div class='content'>
Pleased to know that you liked it. Yeah, the music sometimes goes a bit off. But it is still fun as for me :)</div>
</div>
<div class='comment'>
<div class='author'>Flaviu Simihaian</div>
<div class='content'>
Great video. I also love the music. Beethoven seems to get extra-dramatic near the testing pain point :)<br /><br />Look forward to seeing more in the future and hope to do some  myself.<br /><br />Thanks,<br /><br />Flaviu</div>
</div>
<div class='comment'>
<div class='author'>Dmytrii Nagirniak</div>
<div class='content'>
Sorry about that. I&#39;ve embedded the YouTube version of the video. It is of a little better quality.</div>
</div>
<div class='comment'>
<div class='author'>Anonymous</div>
<div class='content'>
Video on vimeo is bad quality, I had to watch it on Youtube. Thanks for videolesson.</div>
</div>
<div class='comment'>
<div class='author'>Dmytrii Nagirniak</div>
<div class='content'>
If more people will need it, I will probably upload higher resolution somewhere. Have you tried <a href="http://www.youtube.com/watch?v=MWvLofLz04k" rel="nofollow">YouTube</a>?<br /><br />And in the future I will have to record at much lower screen resolution</div>
</div>
<div class='comment'>
<div class='author'>Anonymous</div>
<div class='content'>
If see screencast from page - text is unreadable and font size is too small, at full screen (1080p) - too blur and unreadable too. may be if i&#39;ll have possibility to view at custom player size - it&#39;s will be ok.</div>
</div>
<div class='comment'>
<div class='author'>Dmytrii Nagirniak</div>
<div class='content'>
Try it on YouTube: http://www.youtube.com/watch?v=MWvLofLz04k<br /><br />I&#39;ll update the post a bit later with both links.</div>
</div>
<div class='comment'>
<div class='author'>Anonymous</div>
<div class='content'>
Unfortunately vimeo does not support html5 video</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript Library survey]]></title>
    <link href="http://ApproachE.com/blog/javascript-library-survey/"/>
    <updated>2009-04-17T16:18:00+10:00</updated>
    <id>http://ApproachE.com/blog/javascript-library-survey</id>
    <content type="html"><![CDATA[<div class='post'>
Please help me to decide what library to choose for my everyday usage.<br />
If you have some experience in that area please tell your word <a href="http://dcportal.argocomputing.com.au/CompleteForm.aspx?form=4:447" target="_blank">here</a>. Also please distribute this to as many colleges as you can.<br />
Much appreciated!</div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Dmytrii Nagirniak</div>
<div class='content'>
Hi Alex,<br /><br />Thanks for that. I'm aware of that. But had to mention that I'm not looking for server-side specific library. Instead I want it to be platform independent. Or at the very bad end - .NET specific :)<br /><br />Another thing is that I really had to include MootTools. But, honestly, for me the choice is between jQuery and YUI at this stage.<br /><br />I had enough licensing problems with ExtJS and I don't want to deal with it again.<br /><br />Cheers.</div>
</div>
<div class='comment'>
<div class='author'>Alexander</div>
<div class='content'>
Well, you have forgot Google Web Toolkit (http://code.google.com/webtoolkit/) and MooTools (http://mootools.net/) <br /><br />First one is really coooool for large javascript projects - it performs some optimizations during java2js compilation, and second one is one used by some people for small projects well. <br /><br />By the way ,there's analog of extjs built for google web tookit. Here's their demo: http://extjs.com/explorer/<br /><br />It is called ext-gwt</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use insertBefore instead of appendChild]]></title>
    <link href="http://ApproachE.com/blog/use-insertbefore-instead-of-appendchild/"/>
    <updated>2008-12-16T12:20:00+11:00</updated>
    <id>http://ApproachE.com/blog/use-insertbefore-instead-of-appendchild</id>
    <content type="html"><![CDATA[<div class='post'>
You can get lots of problems when using node.appendChild due to an element may not be allowed to have children. It is especially valid for WYSIWYG editors.<br />
To overcome this just use node.insertBefore which will always succeeds (it seems so at least). It is so just just because of insertBefore add a child to a parent, which already has at least one child and thus is can have children.<br />
Also keeping in mind this constraint:<br />
<div>
<pre style="background-color: #f4f4f4; border-style: none; color: black; font-family: consolas,'Courier New',courier,monospace; font-size: 8pt; line-height: 12pt; margin: 0em; overflow: visible; padding: 0px; width: 100%;">existingChild.insertBefore(newChild, <span style="color: blue;">null</span><span style="color: green;">/*Feeding FF*/</span>);
Assert.areSame(existingChild.parentNode, newChild.parentNode, <span style="color: #006080;">"children should have the same parent"</span>);
Assert.areSame(root, existingchild.parentNode, <span style="color: #006080;">"[root] should be a parent of [exitingChild]"</span>)</pre>
</div>
We can rewrite our code like:<br />
<div>
<pre style="background-color: #f4f4f4; border-style: none; color: black; font-family: consolas,'Courier New',courier,monospace; font-size: 8pt; line-height: 12pt; margin: 0em; overflow: visible; padding: 0px; width: 100%;"><span style="color: green;">/*</span>
<span style="color: green;">* root-|</span>
<span style="color: green;">*      |-&gt;existingChild-|-newChild</span>
<span style="color: green;">*/</span>

<span style="color: green;">// BEFORE:</span>
existingChild.parentNode.appendChild(newChild);

<span style="color: green;">// AFTER:</span>
existingChild.insertBefore(newChild, null);</pre>
</div>
<br />
This is especially useful when you have no idea what existingChild or root can be (as it is in WYSYWYG HTML editors) and seems to be much better and exactly what users need.</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get value of HTML LABEL FOR]]></title>
    <link href="http://ApproachE.com/blog/get-value-of-html-label-for/"/>
    <updated>2008-12-16T11:30:00+11:00</updated>
    <id>http://ApproachE.com/blog/get-value-of-html-label-for</id>
    <content type="html"><![CDATA[<div class='post'>
Make sure you use the code like this to get the value of LABEL's FOR attribute. This will work in most browsers:<br />
<div>
<pre style="background-color: #f4f4f4; border-style: none; color: black; font-family: consolas,'Courier New',courier,monospace; font-size: 8pt; line-height: 12pt; margin: 0em; overflow: visible; padding: 0px; width: 100%;"><span style="color: blue;">var</span> labelFor = myLabel.htmlFor || myLabel.getAttribute(<span style="color: #006080;">'for'</span>); // htmlFor <span style="color: blue;">is</span> W3.org defined and <span style="color: blue;">is</span> <span style="color: blue;">in</span> IE, <span style="color: #006080;">'for'</span> <span style="color: blue;">in</span> <span style="color: blue;">in</span> FF</pre>
</div>
Just a reminder for myself :)</div>

]]></content>
  </entry>
  
</feed>
