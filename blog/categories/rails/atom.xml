<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[rails | Art Of Programming]]></title>
  <link href="http://ApproachE.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://ApproachE.com/"/>
  <updated>2013-07-10T13:18:24+10:00</updated>
  <id>http://ApproachE.com/</id>
  <author>
    <name><![CDATA[Dmytrii Nagirniak]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Testing Rails across time zones]]></title>
    <link href="http://ApproachE.com/blog/testing-rails-across-time-zones/"/>
    <updated>2013-07-10T11:14:00+10:00</updated>
    <id>http://ApproachE.com/blog/testing-rails-across-time-zones</id>
    <content type="html"><![CDATA[<h2>Why?</h2>

<p>Because it is easy to get the dates/times wrong without even realising it.</p>

<h2>How?</h2>

<ol>
<li>Randomise time zone when running specs</li>
<li>Run the specific specs across the different time zones</li>
</ol>


<!-- more -->


<h2>Usage: Randomise time zone when running specs</h2>

<p>The RSpec support file will (part of this Gist) sets the Rails' <code>Time.zone</code> to a random time zone.
So if something is wrong then your CI should eventually fail.</p>

<p>When it will, you should look for the message at the very beginning:</p>

<p><code>
Current rand time zone: (GMT+06:30) Rangoon. Repro: Time.zone = ActiveSupport::TimeZone["Rangoon"]
</code></p>

<p>Then go to your failing spec and in the context of it add the following
(assuming you copy pasted the &ldquo;Repro&rdquo; part from the message):</p>

<p><code>ruby
  before { Time.zone = ActiveSupport::TimeZone["Rangoon"] }
</code></p>

<p>Now you can re-run the spec and it should repeatably and predictably fail (much like RSpec&rsquo;s random order with a given seed).</p>

<p>This works without changing any of the existing specs and relies on
the fact that your CI is running specs often enough.</p>

<h2>Run the specific specs across the different time zones</h2>

<p>You may have some specs that you want to specifically test across all the time zones.</p>

<p>This can be used, for example, with tests on reports that are sensitive to time zone.
(All financial/sales reports probably).</p>

<p>So how do you do it?</p>

<p>Just write the normal specs without thinking about the time zone.
Let&rsquo;s take this as an example:</p>

<p>```ruby
require &lsquo;spec_helper&rsquo;</p>

<p>module SalesReport
  describe SalesChart  do</p>

<pre><code>it "should return chart with data for a week as daily summary" do
  create_three_reservations_per_day 0..1
  chart = SalesChart.for_company(reservations, company)
  chart.data_table.cols.size.should == 4
  rows_from(chart).should == [
    [1.day.ago.to_date, 3, 2, 1],
    [Date.current, 3, 2, 1]
  ]
end

# helpers ommited...
</code></pre>

<p>  end
end
```</p>

<p>Make sure it passes in your timezone.</p>

<p>Then just wrap your spec in <code>across_time_zones</code>, like so:</p>

<p>```ruby
require &lsquo;spec_helper&rsquo;</p>

<p>module SalesReport
  describe SalesChart  do</p>

<pre><code>across_time_zones step: 2.hours do
  it "should return chart with data for a week as daily summary" do
    create_three_reservations_per_day 0..1
    chart = SalesChart.for_company(reservations, company)
    chart.data_table.cols.size.should == 4
    rows_from(chart).should == [
      [1.day.ago.to_date, 3, 2, 1],
      [Date.current, 3, 2, 1]
    ]
  end
end

# helpers ommited...
</code></pre>

<p>  end
end
```</p>

<p>You&rsquo;ll be surprised how many things can go wrong. Especially if you have some more advanced DB queries
that use (in PostgreSQL terms) dates, times and times with time zone, maybe <code>DATE_TRUNC</code> etc.</p>

<p>Now that spec will be created for each time zone with the given step.</p>

<h2>Tips/Gotchas</h2>

<ul>
<li>The default <code>step</code> here is set to 8 hours (it is optional), meaning that only 3 time zones will be tested. It may be sufficient or may not. So prefer to provide it expclicitly.</li>
<li>The smaller the <code>step</code> is, the more specs will be created and the slower the example will become. So choose the number wisely (less than 2 hours is <em>usually</em> not necessary).</li>
<li>Always, always use <code>Time.zone.now</code> (or <code>Time.current</code>) instead of <code>Time.now</code>.</li>
<li>Always, always use <code>Date.current</code> instead of <code>Date.today</code>.</li>
<li>Move any <code>let!</code> (with bang) and <code>before</code> blocks under the <code>across_time_zones</code> to ensure the correct time zone is used at all times.</li>
</ul>


<p>You can grab the RSpec <a href="https://gist.github.com/dnagir/5962765">support file</a> to leaverage it.
<div><script src='https://gist.github.com/5962765.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KnockoutJS Validations Screencast]]></title>
    <link href="http://ApproachE.com/blog/knockoutjs-validations-video/"/>
    <updated>2011-12-22T20:31:00+11:00</updated>
    <id>http://ApproachE.com/blog/knockoutjs-validations-video</id>
    <content type="html"><![CDATA[<div class='post'>
<div>
If you wonder how you can use KnockoutJS with Rails in a similar way to Backbone.js or Spine.js then <a href="http://www.youtube.com/watch?v=cJzQl-bpmUI">watch the video</a>. It also shows how easy it is to apply client side validations that work alongsite with the server-side validations.<br />
<br />

<iframe width="560" height="315" src="http://www.youtube.com/embed/cJzQl-bpmUI?hd=1" frameborder="0" allowfullscreen></iframe>

<div>
Have a look at the <a href="https://github.com/dnagir/knockout-rails">knockout-rails</a> project for more details.
</div>

</div></div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Dmytrii Nagirniak</div>
<div class='content'>
This is actually <a href="https://gist.github.com/9ca5dce0524927d69655" rel="nofollow">one of the options</a> of validating in the background: <br /><br />It doesn&#39;t include the bindings, but gives idea how it can be done. Easier than I thought actually.</div>
</div>
<div class='comment'>
<div class='author'>Dmytrii Nagirniak</div>
<div class='content'>
Pre-validating on the server can technically be done with the Model Events. But it&#39;s not supported out of the box.<br /><br />It is a good idea, but there&#39;s a bit more complexity involved on both client and server. But I&#39;ll gladly accept pull requests to knockout-rails if somebody needs to support that.</div>
</div>
<div class='comment'>
<div class='author'>Aleksey Gureiev</div>
<div class='content'>
This comment has been removed by the author.</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Plugin with Tested Assets Screencast]]></title>
    <link href="http://ApproachE.com/blog/rails-plugin-with-tested-assets/"/>
    <updated>2011-11-19T20:47:00+11:00</updated>
    <id>http://ApproachE.com/blog/rails-plugin-with-tested-assets</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">
Some of the most valuable things you can learn are not written in books, not shown in the presentations and demos. Those come from seeing how <i>others</i> work.<br />
<br />
How do they do all those small things? What tricks do they have? How would they approach that problem?<br />
<br />
Unfortunately, I can't remember seeing people sharing the way they actually work (unless they pair). I want to see what mistakes they make, how they fix those, how they try to come up with a word erasing a line 10 times.<br />
I believe all this is of a great value for a lot of us.<br />
<br />
What I described is <i>partially</i>&nbsp;done by PeepCode's Play By Play series and Tekpub. Those are amazing (usually). But that's not exactly what I am after. Those screencasts are high quality, polished and prepared ones. YOU are NOT featuring there. I want to see YOU there. All of you, guys.<br />
<br />
<br />
So I decided to make a first step (or maybe not so) and screencast myself while working on a Rails Plugin.<br />
<br />
This is mostly real-time work. You'll see how I fail, you'll spot the mistakes I've done and did not even notice, you'll see how I write README. And, most importantly, you will hopefully see some of the things that will help <i>yourself</i>.<br />
<br />
This video features the following tools/technologies:<br />
<br />
<ul style="text-align: left;">
<li>Ruby, Ruby On Rails</li>
<li>CoffeeScript</li>
<li>SASS</li>
<li>Git, Github</li>
<li>Vim (MacVim and Terminal)</li>
<li>Jasmine and basic testing of JavaScript and even CSS assets</li>
<li>etc</li>
</ul>
<div>
Additionally, before watching, make sure you Turn On the Volume. Rare person doesn't like the music that my wife helped me prepare. Even if you don't not like the video, you should like the music :)</div>
<div>
<br /></div>
<div>
I hope you enjoy it. <strong>UPDATE: Please watch it in full screen as the quality is lower than I expected.</strong>
</div>
<div>
<br /></div>
<div>
<br /></div>
<div>

<iframe width="560" height="315" src="http://www.youtube.com/embed/MWvLofLz04k?hd=1" frameborder="0" allowfullscreen></iframe>


</div>
<div>
<br /></div>
<div>
<br /></div>
<div>
<br /></div>
<div>
P.S.: Screencasting is really hard. And that's my first. So&nbsp;apologies&nbsp;if something isn't in-place.</div>
<div>
(If you can't see the video here, open it on&nbsp;<a href="http://vimeo.com/32357445">Vimeo</a>. Alternatively, try <a href="http://www.youtube.com/watch?v=MWvLofLz04k">YouTube</a> - it should work with HTML5-only browser).</div>
<br />
<br />
<br />
<br /></div></div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Dmytrii Nagirniak</div>
<div class='content'>
Pleased to know that you liked it. Yeah, the music sometimes goes a bit off. But it is still fun as for me :)</div>
</div>
<div class='comment'>
<div class='author'>Flaviu Simihaian</div>
<div class='content'>
Great video. I also love the music. Beethoven seems to get extra-dramatic near the testing pain point :)<br /><br />Look forward to seeing more in the future and hope to do some  myself.<br /><br />Thanks,<br /><br />Flaviu</div>
</div>
<div class='comment'>
<div class='author'>Dmytrii Nagirniak</div>
<div class='content'>
Sorry about that. I&#39;ve embedded the YouTube version of the video. It is of a little better quality.</div>
</div>
<div class='comment'>
<div class='author'>Anonymous</div>
<div class='content'>
Video on vimeo is bad quality, I had to watch it on Youtube. Thanks for videolesson.</div>
</div>
<div class='comment'>
<div class='author'>Dmytrii Nagirniak</div>
<div class='content'>
If more people will need it, I will probably upload higher resolution somewhere. Have you tried <a href="http://www.youtube.com/watch?v=MWvLofLz04k" rel="nofollow">YouTube</a>?<br /><br />And in the future I will have to record at much lower screen resolution</div>
</div>
<div class='comment'>
<div class='author'>Anonymous</div>
<div class='content'>
If see screencast from page - text is unreadable and font size is too small, at full screen (1080p) - too blur and unreadable too. may be if i&#39;ll have possibility to view at custom player size - it&#39;s will be ok.</div>
</div>
<div class='comment'>
<div class='author'>Dmytrii Nagirniak</div>
<div class='content'>
Try it on YouTube: http://www.youtube.com/watch?v=MWvLofLz04k<br /><br />I&#39;ll update the post a bit later with both links.</div>
</div>
<div class='comment'>
<div class='author'>Anonymous</div>
<div class='content'>
Unfortunately vimeo does not support html5 video</div>
</div>
</div>

]]></content>
  </entry>
  
</feed>
