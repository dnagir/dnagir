<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ruby | Art Of Programming]]></title>
  <link href="http://ApproachE.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://ApproachE.com/"/>
<<<<<<< HEAD
  <updated>2013-07-10T11:49:46+10:00</updated>
=======
  <updated>2012-10-09T14:32:42+11:00</updated>
>>>>>>> 6472a47d4858bde71a9f9f6992c1c60a4d7205e1
  <id>http://ApproachE.com/</id>
  <author>
    <name><![CDATA[Dmytrii Nagirniak]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
<<<<<<< HEAD
    <title type="html"><![CDATA[Testing Rails across time zones]]></title>
    <link href="http://ApproachE.com/blog/testing-rails-across-time-zones/"/>
    <updated>2013-07-10T11:14:00+10:00</updated>
    <id>http://ApproachE.com/blog/testing-rails-across-time-zones</id>
    <content type="html"><![CDATA[<h2>Why?</h2>

<p>Because it is easy to get the dates/times wrong without even realising it.</p>

<h2>How?</h2>

<ol>
<li>Randomise time zone when running specs</li>
<li>Run the specific specs across the different time zones</li>
</ol>


<!-- more -->


<h2>Usage: Randomise time zone when running specs</h2>

<p>The RSpec support file will (part of this Gist) sets the Rails' <code>Time.zone</code> to a random time zone.
So if something is wrong then your CI should eventually fail.</p>

<p>When it will, you should look for the message at the very beginning:</p>

<p><code>
Current rand time zone: (GMT+06:30) Rangoon. Repro: Time.zone = ActiveSupport::TimeZone["Rangoon"]
</code></p>

<p>Then go to your failing spec and in the context of it add the following
(assuming you copy pasted the &ldquo;Repro&rdquo; part from the message):</p>

<p><code>ruby
  before { Time.zone = ActiveSupport::TimeZone["Rangoon"] }
</code></p>

<p>Now you can re-run the spec and it should repeatably and predictably fail (much like RSpec&rsquo;s random order with a given seed).</p>

<p>This works without changing any of the existing specs and relies on
the fact that your CI is running specs often enough.</p>

<h2>Run the specific specs across the different time zones</h2>

<p>You may have some specs that you want to specifically test across all the time zones.</p>

<p>This can be used, for example, with tests on reports that are sensitive to time zone.
(All financial/sales reports probably).</p>

<p>So how do you do it?</p>

<p>Just write the normal specs without thinking about the time zone.
Let&rsquo;s take this as an example:</p>

<p>```ruby
require &lsquo;spec_helper&rsquo;</p>

<p>module SalesReport
  describe SalesChart  do</p>

<pre><code>it "should return chart with data for a week as daily summary" do
  create_three_reservations_per_day 0..1
  chart = SalesChart.for_company(reservations, company)
  chart.data_table.cols.size.should == 4
  rows_from(chart).should == [
    [1.day.ago.to_date, 3, 2, 1],
    [Date.current, 3, 2, 1]
  ]
end

# helpers ommited...
</code></pre>

<p>  end
end
```</p>

<p>Make sure it passes in your timezone.</p>

<p>Then just wrap your spec in <code>across_time_zones</code>, like so:</p>

<p>```ruby
require &lsquo;spec_helper&rsquo;</p>

<p>module SalesReport
  describe SalesChart  do</p>

<pre><code>across_time_zones step: 2.hours do
  it "should return chart with data for a week as daily summary" do
    create_three_reservations_per_day 0..1
    chart = SalesChart.for_company(reservations, company)
    chart.data_table.cols.size.should == 4
    rows_from(chart).should == [
      [1.day.ago.to_date, 3, 2, 1],
      [Date.current, 3, 2, 1]
    ]
  end
end

# helpers ommited...
</code></pre>

<p>  end
end
```</p>

<p>You&rsquo;ll be surprised how many things can go wrong. Especially if you have some more advanced DB queries
that use (in PostgreSQL terms) dates, times and times with time zone, maybe <code>DATE_TRUNC</code> etc.</p>

<p>Now that spec will be created for each time zone with the given step.</p>

<h2>Tips/Gotchas</h2>

<ul>
<li>The default <code>step</code> here is set to 8 hours (it is optional), meaning that only 3 time zones will be tested. It may be sufficient or may not. So prefer to provide it expclicitly.</li>
<li>The smaller the <code>step</code> is, the more specs will be created and the slower the example will become. So choose the number wisely (less than 2 hours is <em>usually</em> not necessary).</li>
<li>Always, always use <code>Time.zone.now</code> (or <code>Time.current</code>) instead of <code>Time.now</code>.</li>
<li>Always, always use <code>Date.current</code> instead of <code>Date.today</code>.</li>
<li>Move any <code>let!</code> (with bang) and <code>before</code> blocks under the <code>across_time_zones</code> to ensure the correct time zone is used at all times.</li>
</ul>


<p>You can grab the RSpec <a href="https://gist.github.com/dnagir/5962765">support file</a> to leaverage it.
<div><script src='https://gist.github.com/5962765.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
=======
>>>>>>> 6472a47d4858bde71a9f9f6992c1c60a4d7205e1
    <title type="html"><![CDATA[Migrating from Blogger to Octopress]]></title>
    <link href="http://ApproachE.com/blog/migrating-from-blogger-to-octopress/"/>
    <updated>2012-03-04T20:09:00+11:00</updated>
    <id>http://ApproachE.com/blog/migrating-from-blogger-to-octopress</id>
<<<<<<< HEAD
    <content type="html"><![CDATA[<p>I&rsquo;ve been a Blogger user since 2006 and decided to switch over to something more geeky.</p>
=======
    <content type="html"><![CDATA[<p>I've been a Blogger user since 2006 and decided to switch over to something more geeky.</p>
>>>>>>> 6472a47d4858bde71a9f9f6992c1c60a4d7205e1

<p>This post will cover some of the reasons for that and also will provide an overview
of how to migrate from Blogger to Octopress.</p>

<h2>What do I want to achieve?</h2>

<ul>
<<<<<<< HEAD
<li><strong>Merging</strong> my personal site and blog &ndash; those were totally separate, unrelated entities, not good enough.</li>
=======
<li><strong>Merging</strong> my personal site and blog - those were totally separate, unrelated entities, not good enough.</li>
>>>>>>> 6472a47d4858bde71a9f9f6992c1c60a4d7205e1
<li>Write <strong>more often</strong>, using the same tools I use on a daily basis (Vim ATM).</li>
<li>More <strong>hands-on</strong> kind of blogging, I actually do want to do the dirty work messing with HTML/CSS etc.</li>
</ul>


<h2>Reasons for switching:</h2>

<ul>
<li><strong>Markdown, HAML, bare bones HTML</strong>. I wanted to have a bit more control over how my blog looks like.</li>
<<<<<<< HEAD
<li><strong>Blogging software</strong> isn&rsquo;t good enough. Unfortunately I haven&rsquo;t found yet a good <strong>geeky</strong> S/W for blogging.</li>
=======
<li><strong>Blogging software</strong> isn't good enough. Unfortunately I haven't found yet a good <strong>geeky</strong> S/W for blogging.</li>
>>>>>>> 6472a47d4858bde71a9f9f6992c1c60a4d7205e1
<li><strong>Easier to write</strong> from Vim. Writing is much easier, not moving my hands off the keyboard and staying in the terminal.</li>
<li><strong>Version controlled</strong>. Nice to have, but not crucial for me.</li>
</ul>


<<<<<<< HEAD
<h2>Why I didn&rsquo;t want to switch:</h2>

<ul>
<li>Losing <strong>PageRank</strong>, which shouldn&rsquo;t really be an issue (see below).</li>
=======
<h2>Why I didn't want to switch:</h2>

<ul>
<li>Losing <strong>PageRank</strong>, which shouldn't really be an issue (see below).</li>
>>>>>>> 6472a47d4858bde71a9f9f6992c1c60a4d7205e1
<li><strong>Uncerteinities</strong>. So now I have to maintain it myself? Take care of updates? Hell, yeah!</li>
<li><strong>Self-hosted</strong>. Nothing to say here.</li>
<li>I have never ever needed to do anything with the blog in terms of maintenance while being on Blogger. I really just worked.</li>
</ul>


<p>Switching to a self-hosted blog/site will require a bit of involvement from me.
<<<<<<< HEAD
But this is something I am willing to take. It&rsquo;s time to take my ass out of the comfy couch of Blogger.</p>
=======
But this is something I am willing to take. It's time to take my ass out of the comfy couch of Blogger.</p>
>>>>>>> 6472a47d4858bde71a9f9f6992c1c60a4d7205e1

<h2>So how to actually migrate?</h2>

<p>I would split it into the following larger steps:</p>

<ol>
<li>Preparation.</li>
<li>Deployment.</li>
<li>Finalisation.</li>
</ol>


<h2>Preparation</h2>

<p>At this stage you need to <a href="http://octopress.org/docs/setup">setup the Octopress itself</a>, <a href="http://octopress.org/docs/configuring">configure</a> it and import your existing posts from Blogger.</p>

<<<<<<< HEAD
<p>I won&rsquo;t go into details how to <a href="http://octopress.org/docs/theme">customise</a> and set it up, you see the links.</p>

<p>I&rsquo;ll go directly into the migrating the Blogger posts over to Octopress.</p>
=======
<p>I won't go into details how to <a href="http://octopress.org/docs/theme">customise</a> and set it up, you see the links.</p>

<p>I'll go directly into the migrating the Blogger posts over to Octopress.</p>
>>>>>>> 6472a47d4858bde71a9f9f6992c1c60a4d7205e1

<p>What you need to do is</p>

<ol>
<li>Export your Blogger posts.</li>
<li>Use <a href="https://gist.github.com/1765496">this script</a> to import it into Octopress.</li>
</ol>


<<<<<<< HEAD
<p>After you do this, all you&rsquo;ll get a bunch of posts that are already part of your site.
=======
<p>After you do this, all you'll get a bunch of posts that are already part of your site.
>>>>>>> 6472a47d4858bde71a9f9f6992c1c60a4d7205e1
Double check whether everything is correct or not. You may want to tweak the script for your needs.</p>

<p><em>Note</em> that the script also imports the comments, but in a little ugly way.
(<em>TIP</em>, you may want to disable commenting before exporting the posts from Blogger).</p>

<<<<<<< HEAD
<p>Next thing you want to do is to update your Octopress RSS feed URL so that existing subscribers won&rsquo;t be lost.
I am using FeedBurner and I had to set <code>subscribe_rss: http://feeds.feedburner.com/DmitriyNagirnyak</code> in the <code>_config.yml</code></p>

<p>Now that you&rsquo;ve got your posts, you want to set-up the redirection from your blog to your new site.</p>

<p>I prepared <a href="https://github.com/dnagir/approache-redirects/blob/master/app.rb">simple Sinatra application</a> for that.
You definitely want to fork and tweak it to your needs. Note that I&rsquo;m not using the <code>blog/YYYY/MM/DD/title</code> format.
I just use the <code>blog/title</code> format.</p>

<p>Now go ahead and deploy this app. I&rsquo;ve decided to use Heroku for that which is the simplest and easiest way to go.</p>
=======
<p>Next thing you want to do is to update your Octopress RSS feed URL so that existing subscribers won't be lost.
I am using FeedBurner and I had to set <code>subscribe_rss: http://feeds.feedburner.com/DmitriyNagirnyak</code> in the <code>_config.yml</code></p>

<p>Now that you've got your posts, you want to set-up the redirection from your blog to your new site.</p>

<p>I prepared <a href="https://github.com/dnagir/approache-redirects/blob/master/app.rb">simple Sinatra application</a> for that.
You definitely want to fork and tweak it to your needs. Note that I'm not using the <code>blog/YYYY/MM/DD/title</code> format.
I just use the <code>blog/title</code> format.</p>

<p>Now go ahead and deploy this app. I've decided to use Heroku for that which is the simplest and easiest way to go.</p>
>>>>>>> 6472a47d4858bde71a9f9f6992c1c60a4d7205e1

<p>But <strong>make sure you deploy to the domain of your blog</strong>. For example, my Blogger blog was hosted on the <code>blog.approache.com</code> and I deployed it to this domain.</p>

<p>It of course will not take any affect until you change your DNS settings.
<<<<<<< HEAD
But this will enable permanent redirects immediately when you&rsquo;ll do that (thus preserving all your old links).</p>
=======
But this will enable permanent redirects immediately when you'll do that (thus preserving all your old links).</p>
>>>>>>> 6472a47d4858bde71a9f9f6992c1c60a4d7205e1

<h2>Deployment</h2>

<p>By now you should have:</p>

<ul>
<li>The Octopress site ready to go (with all the posts migrated).</li>
<li>Blogger redirection deployed.</li>
</ul>


<<<<<<< HEAD
<p>It&rsquo;s time to go ahead and actually <a href="http://octopress.org/docs/deploying">deploy</a> your Octopress site.</p>
=======
<p>It's time to go ahead and actually <a href="http://octopress.org/docs/deploying">deploy</a> your Octopress site.</p>
>>>>>>> 6472a47d4858bde71a9f9f6992c1c60a4d7205e1

<p>I wanted to merge <code>blog.approache.com</code> into the <code>approache.com</code> so I deployed the new site to <code>approache.com</code>
(hosted on <em>Github Pages</em>).</p>

<p>Now make sure everything is working properly and you have dome everything right.
<<<<<<< HEAD
If you&rsquo;ve missed something out, then go ahead and fix it. Then redeploy.</p>

<p>This may take a couple of iterations to get it right.</p>

<p>The point here is that you basically now have 2 blogs &ndash; one is the old Blogger, the other &ndash; the Octopress.
You can experiment with the Octopress here, but don&rsquo;t do it for too long (I would say max of 1 day).</p>

<p>After you&rsquo;re happy with the new site and blog it&rsquo;s time to finalise everything.</p>
=======
If you've missed something out, then go ahead and fix it. Then redeploy.</p>

<p>This may take a couple of iterations to get it right.</p>

<p>The point here is that you basically now have 2 blogs - one is the old Blogger, the other - the Octopress.
You can experiment with the Octopress here, but don't do it for too long (I would say max of 1 day).</p>

<p>After you're happy with the new site and blog it's time to finalise everything.</p>
>>>>>>> 6472a47d4858bde71a9f9f6992c1c60a4d7205e1

<h2>Finalisation</h2>

<p>Next step is to make sure your subscribers will still receive updates through the FeedBurner.
For that:</p>

<ol>
<li>Sign in into FeedBurner.</li>
<li>Replace the original feed URL by the Octopress' one (which is something like <code>http://ApproachE.com/atom.xml</code>).</li>
</ol>


<p>By now you should be ready to switch your your Blogger domain to your main site.</p>

<p>You probably will do it simply by changing your DNS record to point to your Octopress server.
In my case I had to change the DNS record from <code>blog - CNAME - ghs.google.com</code> to <code>. - A - 207.97.227.245</code> (dot means top-level domain here).</p>

<<<<<<< HEAD
<p>Since you&rsquo;ve already deployed your redirection app, all the old links will still work.
=======
<p>Since you've already deployed your redirection app, all the old links will still work.
>>>>>>> 6472a47d4858bde71a9f9f6992c1c60a4d7205e1
All the PageRank should be preserved.</p>

<p>The very last thing to do is to <strong>disable the Blogger</strong> if you want to.</p>

<h2>Summary</h2>

<<<<<<< HEAD
<p>Switching to Octopress was relatively painless thanks to Blogger&rsquo;s ability to export posts and the script that could import it into Octopress.</p>
=======
<p>Switching to Octopress was relatively painless thanks to Blogger's ability to export posts and the script that could import it into Octopress.</p>
>>>>>>> 6472a47d4858bde71a9f9f6992c1c60a4d7205e1

<p>Preserving URL was relatively easy too and the rest was left to FeedBurner and DNS hosting.</p>

<p>Hope this is helpful for you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KnockoutJS Validations Screencast]]></title>
    <link href="http://ApproachE.com/blog/knockoutjs-validations-video/"/>
    <updated>2011-12-22T20:31:00+11:00</updated>
    <id>http://ApproachE.com/blog/knockoutjs-validations-video</id>
    <content type="html"><![CDATA[<div class='post'>
<div>
If you wonder how you can use KnockoutJS with Rails in a similar way to Backbone.js or Spine.js then <a href="http://www.youtube.com/watch?v=cJzQl-bpmUI">watch the video</a>. It also shows how easy it is to apply client side validations that work alongsite with the server-side validations.<br />
<br />

<iframe width="560" height="315" src="http://www.youtube.com/embed/cJzQl-bpmUI?hd=1" frameborder="0" allowfullscreen></iframe>

<div>
Have a look at the <a href="https://github.com/dnagir/knockout-rails">knockout-rails</a> project for more details.
</div>

</div></div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Dmytrii Nagirniak</div>
<div class='content'>
This is actually <a href="https://gist.github.com/9ca5dce0524927d69655" rel="nofollow">one of the options</a> of validating in the background: <br /><br />It doesn&#39;t include the bindings, but gives idea how it can be done. Easier than I thought actually.</div>
</div>
<div class='comment'>
<div class='author'>Dmytrii Nagirniak</div>
<div class='content'>
Pre-validating on the server can technically be done with the Model Events. But it&#39;s not supported out of the box.<br /><br />It is a good idea, but there&#39;s a bit more complexity involved on both client and server. But I&#39;ll gladly accept pull requests to knockout-rails if somebody needs to support that.</div>
</div>
<div class='comment'>
<div class='author'>Aleksey Gureiev</div>
<div class='content'>
This comment has been removed by the author.</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Issues switching to JRuby from MRI 1.9]]></title>
    <link href="http://ApproachE.com/blog/issues-switching-to-jruby-from-mri-19/"/>
    <updated>2011-11-29T11:51:00+11:00</updated>
    <id>http://ApproachE.com/blog/issues-switching-to-jruby-from-mri-19</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">
<b>UDPATE</b>: The reason for switching to JRuby the native neo4j API. Have to use REST API with MRI.<br />
<br />
This is just a quick recap of what issues I have had trying to switch existing app from MRI Ruby (1.9.3) to JRuby (1.6.4).<br />
<br />
Unfortunately I stepped back and didn't want to spend more time as it felt an unbreakable chain of issues. Resolving one, you think "huh, awesome". But very soon you hit the next.<br />
And I couldn't see it stopping.<br />
<br />
<b>But PLEASE bear in mind</b> that I only spent a couple of hours on that. With a little bit more persistence, you may be able to the end of the tunnel.<br />
<br />
The overall impression is that it is not a big deal really. The problems arise when trying to use other libraries. And unfortunately, not all of the gems <b>care deep enough to support JRuby</b>. And this is the biggest issue in my opinion, there are very little issues with JRuby itself. The transition (from the syntax perspective) was extremely easy.<br />
<br />
The application is pretty standard Rails 3.1 app that uses gems like Dragonfly, inherited_resources, cancan, paper_trail, Authlogic, CoffeeScript, Haml, Sass, Formtastic etc. For testing - things like rspec-rails, cucumber-rails, capybara-webkit, guard (rspec and cucumber), database_cleaner etc.<br />
<br />
So here is a quick list of the things that I faced on my way.<br />
<br />
Before everything else I enabled support for 1.9 syntax in JRuby (export JRUBY_OPTS=--1.9).<br />
<br />
It all first started with <a href="https://gist.github.com/1402753">the weird issue</a> where the <b>wrong arguments were passed to RSpec shared example</b>.<br />
Unfortunately I did not figure out why it happened and just patched it as you can see in the comments there.<br />
<script src="https://gist.github.com/1402753.js?file=sample_spec.rb">
</script>

<br />
<br />
<br />
After fixing this issue I had another one related to <b>database_cleaner</b>. So I ended up with a <a href="https://github.com/bmabey/database_cleaner/pull/83">pull request</a> that worked for me.<br />
<br />
The other issue was a<b> huge stack trace</b>. I scrolled 3 pages in the terminal to get to the top. Most of that stack trace is deep inside Java. Additionally I got <b>wrong line number</b> on exception. This "features/step_definitions/company_steps.rb:234" makes me thing that the exception is at line 234. But that file only had 49 lines of code. Now, go figure.<br />
<br />
Going on... <a href="https://github.com/colszowka/simplecov">SimpleCov</a> gem didn't work out of the box and gave the warning that I need to enable debugging. That's fine and understandable. But after half an hour of debugging of unrelated exception, it turned out that <b>SimpleCove threw an exception</b> because of that. So had to go and explicitly disable it.<br />
<br />
Then I managed to run all of my specs. But I was pretty surprised how <b>slow</b> it was:<br />
<pre><code>
# rvm use 1.9.3
# time rspec # real=14s, rspec time ~ 12s

# rvm use jruby
# time rspec # real=52s, rspec time ~ 30s

</code>
</pre>
But this is expected as JRuby doesn't have enough time to optimise here. It should be much better in production. But it will be also shit slow after deployment.<br />
Ok. That's fine. <b>I can trust it's fast</b>.<br />
<br />
Then I tried running the cucumber specs and had to file the <a href="http://jira.codehaus.org/browse/JRUBY-6237">issue</a> to support <b>new Ruby 1.9.3 syntax</b> (a = b = f 1). Not a big deal, easily fixed with parens: a = b = f(1).<br />
<br />
Next and the <b>final issue</b> - I could not run the <b>headless cucumber specs</b> (capybara-webkit). It just got stuck (no CPU used) and feels like there is a <b>dead-lock</b> or something similar.<br />
<br />
I couldn't see way of fixing it easily and decided that for now I am <b>done with</b> it. So going <b>back to Ruby 1.9.3</b>.<br />
<br />
<br />
<b>To summarise</b>, I <b>did not feel like it's a problem</b> to switch to JRuby. But it's really a <b>big deal to actually use</b> it due to the number of <b>C extensions</b> that JRuby doesn't really support.<br />
<br />
Again, to emphasise, there is nothing horribly wrong with JRuby and it seems to be pretty good. But the real showstoppers are the C extensions.</div></div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Dmytrii Nagirniak</div>
<div class='content'>
Totally with you on this. But real world seems to be a bit different :)</div>
</div>
<div class='comment'>
<div class='author'>Postmodern</div>
<div class='content'>
Yet another reason to avoid C-extensions. When selecting dependencies for a new project, I prefer to select pure-Ruby libraries or FFI bindings (https://github.com/ffi/ffi#readme). Pure-Ruby libraries should be faster on Rubinius/JRuby. FFI bindings work perfectly on both MRI and JRuby.<br /><br />If developers want faster Ruby code, they should help make MRI faster (or switch to Rubinius/JRuby), instead of writing more code in C.</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Plugin with Tested Assets Screencast]]></title>
    <link href="http://ApproachE.com/blog/rails-plugin-with-tested-assets/"/>
    <updated>2011-11-19T20:47:00+11:00</updated>
    <id>http://ApproachE.com/blog/rails-plugin-with-tested-assets</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">
Some of the most valuable things you can learn are not written in books, not shown in the presentations and demos. Those come from seeing how <i>others</i> work.<br />
<br />
How do they do all those small things? What tricks do they have? How would they approach that problem?<br />
<br />
Unfortunately, I can't remember seeing people sharing the way they actually work (unless they pair). I want to see what mistakes they make, how they fix those, how they try to come up with a word erasing a line 10 times.<br />
I believe all this is of a great value for a lot of us.<br />
<br />
What I described is <i>partially</i>&nbsp;done by PeepCode's Play By Play series and Tekpub. Those are amazing (usually). But that's not exactly what I am after. Those screencasts are high quality, polished and prepared ones. YOU are NOT featuring there. I want to see YOU there. All of you, guys.<br />
<br />
<br />
So I decided to make a first step (or maybe not so) and screencast myself while working on a Rails Plugin.<br />
<br />
This is mostly real-time work. You'll see how I fail, you'll spot the mistakes I've done and did not even notice, you'll see how I write README. And, most importantly, you will hopefully see some of the things that will help <i>yourself</i>.<br />
<br />
This video features the following tools/technologies:<br />
<br />
<ul style="text-align: left;">
<li>Ruby, Ruby On Rails</li>
<li>CoffeeScript</li>
<li>SASS</li>
<li>Git, Github</li>
<li>Vim (MacVim and Terminal)</li>
<li>Jasmine and basic testing of JavaScript and even CSS assets</li>
<li>etc</li>
</ul>
<div>
Additionally, before watching, make sure you Turn On the Volume. Rare person doesn't like the music that my wife helped me prepare. Even if you don't not like the video, you should like the music :)</div>
<div>
<br /></div>
<div>
I hope you enjoy it. <strong>UPDATE: Please watch it in full screen as the quality is lower than I expected.</strong>
</div>
<div>
<br /></div>
<div>
<br /></div>
<div>

<iframe width="560" height="315" src="http://www.youtube.com/embed/MWvLofLz04k?hd=1" frameborder="0" allowfullscreen></iframe>


</div>
<div>
<br /></div>
<div>
<br /></div>
<div>
<br /></div>
<div>
P.S.: Screencasting is really hard. And that's my first. So&nbsp;apologies&nbsp;if something isn't in-place.</div>
<div>
(If you can't see the video here, open it on&nbsp;<a href="http://vimeo.com/32357445">Vimeo</a>. Alternatively, try <a href="http://www.youtube.com/watch?v=MWvLofLz04k">YouTube</a> - it should work with HTML5-only browser).</div>
<br />
<br />
<br />
<br /></div></div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Dmytrii Nagirniak</div>
<div class='content'>
Pleased to know that you liked it. Yeah, the music sometimes goes a bit off. But it is still fun as for me :)</div>
</div>
<div class='comment'>
<div class='author'>Flaviu Simihaian</div>
<div class='content'>
Great video. I also love the music. Beethoven seems to get extra-dramatic near the testing pain point :)<br /><br />Look forward to seeing more in the future and hope to do some  myself.<br /><br />Thanks,<br /><br />Flaviu</div>
</div>
<div class='comment'>
<div class='author'>Dmytrii Nagirniak</div>
<div class='content'>
Sorry about that. I&#39;ve embedded the YouTube version of the video. It is of a little better quality.</div>
</div>
<div class='comment'>
<div class='author'>Anonymous</div>
<div class='content'>
Video on vimeo is bad quality, I had to watch it on Youtube. Thanks for videolesson.</div>
</div>
<div class='comment'>
<div class='author'>Dmytrii Nagirniak</div>
<div class='content'>
If more people will need it, I will probably upload higher resolution somewhere. Have you tried <a href="http://www.youtube.com/watch?v=MWvLofLz04k" rel="nofollow">YouTube</a>?<br /><br />And in the future I will have to record at much lower screen resolution</div>
</div>
<div class='comment'>
<div class='author'>Anonymous</div>
<div class='content'>
If see screencast from page - text is unreadable and font size is too small, at full screen (1080p) - too blur and unreadable too. may be if i&#39;ll have possibility to view at custom player size - it&#39;s will be ok.</div>
</div>
<div class='comment'>
<div class='author'>Dmytrii Nagirniak</div>
<div class='content'>
Try it on YouTube: http://www.youtube.com/watch?v=MWvLofLz04k<br /><br />I&#39;ll update the post a bit later with both links.</div>
</div>
<div class='comment'>
<div class='author'>Anonymous</div>
<div class='content'>
Unfortunately vimeo does not support html5 video</div>
</div>
</div>

]]></content>
  </entry>
  
<<<<<<< HEAD
=======
  <entry>
    <title type="html"><![CDATA[Templating done easy - JavaScript HAML with Rails]]></title>
    <link href="http://ApproachE.com/blog/templating-done-easy-javascript-haml/"/>
    <updated>2011-08-19T19:26:00+10:00</updated>
    <id>http://ApproachE.com/blog/templating-done-easy-javascript-haml</id>
    <content type="html"><![CDATA[<div class='post'>
<h3>
HAML templating with no worries: native, precompiled HAML. Blazing fast and as easy to use as it can be. </h3>

<h3>
<strong>
<em>UPDATE: this functionality moved into <a href='https://github.com/dnagir/ruby-haml-js'>ruby-haml-js</a> gem, please use it instead.</em>
</strong>
</h3>

Recently I have been working on a Ruby gem that packs a set of common JavaScript libraries in one place so you can just reference those easily from <b>Rails 3.1</b> app.  But now I want to write a bit about a very handy tool that the gem includes.  I needed to work on a <a href='http://documentcloud.github.com/backbone'>Backbone</a> app and, unfortunately, there was no very simple and easy way of using HAML markup for my client side templates. Main problems: <ol>
<li>I don't want to <b>embed</b> the template into the document.</li>
<li>The Underscore.js templating is ok, but it is <b>too verbose</b> for me (as most of others).</li>
<li>The <a href="https://github.com/creationix/haml-js">haml-js</a> is great, but I do not want to bother <b>precompiling</b> the templates.</li>
<li>I do not want to think about templating as another layer or component. I want it to <b>just work</b>.</li>
</ol>

<div>
Fortunately it was pretty easy solve these <em>problems</em> with the <a href="https://github.com/sstephenson/sprockets">Sprockets</a> and Rails 3.1.
</div>

<div>
So from now on you can just write normal HAML templates and consume those with no worries from JavaScript.
</div>

<div>
All you need to do, is to add <a href="https://github.com/dnagir/pakunok">pakunok</a> gem to your Rails 3.1 Gemfile.  This will give you templates as <b>native JavaScript functions</b> that you can use.
</div>


<div>
It's better to <a href='https://gist.github.com/1156409'>see than hear</a>
</div>

<div>
<script src="https://gist.github.com/1156409.js">
</script>
</div>

<div>
 Feel free to head to the <a href="https://github.com/dnagir/pakunok/issues">issues</a> and provide some feedback or <a href="https://github.com/dnagir/pakunok/">read more</a>.</div></div>

]]></content>
  </entry>
  
>>>>>>> 6472a47d4858bde71a9f9f6992c1c60a4d7205e1
</feed>
