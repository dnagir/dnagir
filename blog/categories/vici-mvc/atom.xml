<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vici-mvc | My Octopress Blog]]></title>
  <link href="http://dnagir.github.com/dnagir/blog/categories/vici-mvc/atom.xml" rel="self"/>
  <link href="http://dnagir.github.com/dnagir/"/>
  <updated>2012-02-08T21:10:33+11:00</updated>
  <id>http://dnagir.github.com/dnagir/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vici MVC – simple .NET implementation]]></title>
    <link href="http://dnagir.github.com/dnagir/blog/2009/11/02/vici-mvc-simple-net-implemetation/"/>
    <updated>2009-11-02T15:02:00+11:00</updated>
    <id>http://dnagir.github.com/dnagir/blog/2009/11/02/vici-mvc-simple-net-implemetation</id>
    <content type="html"><![CDATA[<div class='post'>
I have found the <a href="http://viciproject.com/wiki/projects/mvc/home" target="_blank">ViciMVC</a> project and it caught my interest. What I can observe – it is really simple implementation of the MVC pattern for .NET (ASP.NET).<br />
The key points I should mention about it are:<br />
<ul>
<li>It is very lightweight.</li>
<li>It is very similar to Castle MonoRail and ASP.NET MVC.</li>
<li>It has its own, HTML based view engine which is based on their own <a href="http://viciproject.com/wiki/projects/parser/home" target="_blank">Vici parser</a>. The parser looks really great and allows to run C# code in it. Good work.</li>
<li>Unit testing is not bound to the HttpContext (as we all would expect) AND (this is huge for me) allow to render the resulting html so unit tests can just access raw output produced by the action.</li>
</ul>
The guys just did <b>what they want and how they want</b>. Great work overall.<br />
I just must mention the ViciProject. The tools are great. Simple, lightweight and looks like easy to use.</div>

]]></content>
  </entry>
  
</feed>
