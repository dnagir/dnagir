<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: nhaml | Art Of Programming]]></title>
  <link href="http://ApproachE.com/blog/categories/nhaml/atom.xml" rel="self"/>
  <link href="http://ApproachE.com/"/>
  <updated>2012-03-04T23:05:08+11:00</updated>
  <id>http://ApproachE.com/</id>
  <author>
    <name><![CDATA[Dmytrii Nagirniak]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Parameterised partials in NHAML – first thought]]></title>
    <link href="http://ApproachE.com/blog/parameterised-partials-in-nhaml-first/"/>
    <updated>2009-09-04T14:02:00+10:00</updated>
    <id>http://ApproachE.com/blog/parameterised-partials-in-nhaml-first</id>
    <content type="html"><![CDATA[<div class='post'>
Thinking about parameterised <a href="http://code.google.com/p/nhaml/issues/detail?id=56" target="_blank">partial views in NHAML</a>.<br />
<h4>
User perspective (view)</h4>
How I want to use the partials:<br />
_ TextBox(“FirstName”, “Given Name”)    <br />_ TextBox(“FirstName”)     <br />_ TextBox<br />
<br />
<h4>
User perspective (partial)</h4>
Define the _TextBox partial:<br />
! (string key, string title=”Provide value:”)    <br />&nbsp; = Html.LabelFor(key).Title(title + variableFromView)     <br />&nbsp; = Html.TextBox(key)<br />
the <b>first line defines set of parameters</b> for the partials. They can be used <b>as regular variables </b>on the partial view and do not intersect in any way with variables on the view. These are <b>local variables only</b>. So we can have integer key variable on the view with value 12345 and string key variable on the partial view with value “partial”. Of course the “partial” value should be the value used in the partial view. Additionally if there are no parameters passed <b>defaults are used</b>.<br />
<br />
<h4>
Requirements</h4>
<ol>
<li>View overrides variables used in outer scope. </li>
<li>View can access outer-scope variables [POTENTIALLY SHOULD AVOID]. </li>
<li>Parameter values have default value if not specified in the actual list of parameters. </li>
<li>Parameter can define a default value which will be used if no value has been provided. </li>
</ol>
<h4>
Implementation thoughts</h4>
To satisfy requirements #1, it seems the partial view should be isolated from the rest of the view processing to be able to handle local variables (In C# it is impossible to have variable with the same name in one method). This behaviour is totally different from the way NHAML works now. Currently any view, partial, partial of partial (of partial…) are executed in one, single scope; generally, sharing all the variables.<br />
To satisfy the requirement #2 we must execute all the partial code in the same scope as the partial view itself. But this won’t satisfy requirement #1.<br />
So at the moment, C# does not allow to implement this at the moment. And as a workaround for this we could discard requirement #2.<br />
The requirements 3 and 4 should not be hard to do.<br />
Possible implementation in meta-code for the <b>NHAML generated code</b> could look like:<br />
<pre class="csharpcode"><span class="rem">// NHAML: _ TextBox("FirstName"), isolating the scope</span>
<span class="kwrd">new</span> NhamlGeneratedPartialTextBox(<span class="kwrd">this</span>).Render(<span class="str">"FirstName"</span>, <span class="str">"Provide value:"</span>);
<span class="rem">// NHAML: _ TextBox</span>
<span class="kwrd">new</span> NhamlGeneratedPartialTextBox(<span class="kwrd">this</span>).Render(<span class="kwrd">default</span>(<span class="kwrd">string</span>), <span class="str">"Provide value:"</span>);</pre>
<style type="text/css">
.csharpcode, .csharpcode pre
{
 font-size: small;
 color: black;
 font-family: consolas, "Courier New", courier, monospace;
 background-color: #ffffff;
 /*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
 background-color: #f4f4f4;
 width: 100%;
 margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<br />
So I would say we can pay the price of not being able to access global variables from partial for the sake of partial parameters.<br />
Also I should mention that the way NHAML works now (joining all the partials into one scope) does not feel good/safe for me. I hit couple of issues with it previously that make my partials strongly bound to the view where they are used. So the <b>partials should be isolated</b>.</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simplify Iteration in MVC Views with NHAML]]></title>
    <link href="http://ApproachE.com/blog/simplify-iteration-in-mvc-views-with/"/>
    <updated>2009-09-01T21:04:00+10:00</updated>
    <id>http://ApproachE.com/blog/simplify-iteration-in-mvc-views-with</id>
    <content type="html"><![CDATA[<div class='post'>
This post is inspired by the <a href="http://blog.codeville.net/2009/08/31/simplify-iteration-in-your-mvc-views/">one</a> from Steve Sanderson. He wants to improve the table generation on the WebForms engine in ASP.NET MVC. I definitely recommend to switch to <a href="http://code.google.com/p/nhaml/">NHAML</a> instead.<br />
<br />
This is how it would look: (there is no tbody - must be Steve's mistake, anyway I'll leave it as is)<br />
<pre><code>

%table
  %thead
    %th Rank
    %th Name
    %th Age
  %tbody
    - var people.Model.ToList();
    - for(int index=0; index&lt;people.Count; index++) {
      - var cssClass = "myitem-" + (index % 2 == 0 ? "odd" : "even");
      - if (index == people.Count-1) cssClass += " myitem-last";
        %tr {class=cssClass}
          %td
            = index + 1
            .
          %td
            &amp;= people[index].Name
          %td
            &amp;= people[index].Age



</code></pre>
And this is much more readable for me, especially comparing to the <a href="http://blog.codeville.net/2009/08/31/simplify-iteration-in-your-mvc-views/">original</a>.<br />
Also keep in mind there are no any extension methods used, just pure C# and NHAML.<br />
Adding some extension methods I would probably make it look like this:
<br />
<pre><code>

%table
  %thead
    %th Rank
    %th Name
    %th Age
  %tbody
    - for(int index=0; index&lt;Model.People.Count; index++) {
        %tr{ class=#{Model.People.RowClassFor(index)} }
          %td
            = index + 1
            .
          %td
            &amp;= people[index].Name
          %td
            &amp;= people[index].Age

</code></pre>
<br />
<br />
And we have only simplest possible extension method: RowClassFor. It can be reused in all the tables so you don't need to modify million of view in order to change css classes.<br />
Looks much better? Don't you agree?</div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Dmytrii Nagirniak</div>
<div class='content'>
The NHAML community is not very large but it is under continuous development and improvement. There are couple nice fellas working on it. Check the SVN history and you will see.<br /><br />Additionally there are large number of tests for NHAML. So I can sleep well using it.<br /><br />Also you can easily contribute to it and are very welcome to do so. Just ask at the user groups and I believe you will get invited.</div>
</div>
<div class='comment'>
<div class='author'>Anonymous</div>
<div class='content'>
Hi - I accidentally discovered NHaml and like what I have seen so far. However, the community seems very quiet and not a lot seems to be happening. Am I missing something or is NHaml winding down. <br /><br />I would appreciate any information available.</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NHAML – scripts and styles, code block]]></title>
    <link href="http://ApproachE.com/blog/nhaml-scripts-and-styles-code-block/"/>
    <updated>2009-07-14T16:51:00+10:00</updated>
    <id>http://ApproachE.com/blog/nhaml-scripts-and-styles-code-block</id>
    <content type="html"><![CDATA[<div class='post'>
Another useful tip for NHAML users that I came up with. I am assuming the site with following technical description:<br />
<ol>
<li>Every page has common CSS. </li>
<li>Every page has common scripts. </li>
<li>Some page may include up to 2 additional CSS files. </li>
<li>Some pages may include up to 2 additional JS files. </li>
<li>Soma pages may include Google Maps Script. </li>
<li>Some pages may include some of the above based on conditions. </li>
</ol>
Having these I want to make it as easy as it can be. With WebForms view engine it is not really problematic but it is too verbose. It means more code, more time spent more errors.<br />
But with NHAML it makes it a breath.<br />
Satisfying requirements 1 and 2 i not a problem at all. This is not a problem with WebForms as well. Just including those files in the master page.<br />
What about other? Well, easy. Here is whet i write to satisfy 3 and 4.<br />
<pre class="csharpcode">^ css = ""
^ script = ""
%h2 Product Details

OR
^ css = "another"
^ script = "another"
%h2 Product Details</pre>
<style type="text/css">
.csharpcode, .csharpcode pre
{
 font-size: small;
 color: black;
 font-family: consolas, "Courier New", courier, monospace;
 background-color: #ffffff;
 /*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
 background-color: #f4f4f4;
 width: 100%;
 margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<br />
<br />
What happens here? By using empty string I declare that I want to include the script/css from the default location with default name for the given controller. This is convenient and conventional. This way I enforce that the assets (JS, CSS) are not going to be mixed with views or something else.<br />
In first example I just say “Hey! I need CSS and Script for current controller!”. 
  <br />In second example I say&nbsp; “Hey! I need CSS and Script for current controller with name <i>another</i>!”. 

  <br />
You don’t care how and where they will be included. You just tell what you need. That’s it.<br />
This is how we can include 2 script and 2 CSSs:<br />
<pre class="csharpcode">^ css = <span class="str">""</span>
^ script = <span class="str">""</span>
^ csss = <span class="str">"another"</span>
^ scripts = <span class="str">"another"</span></pre>
<br />
Ok. Let’s go to 5. The idea is the same but much more “typed”:<br />
<pre class="csharpcode">^ needMap = <span class="kwrd">true</span>
^ script = <span class="str">"map-integration"</span></pre>
Can it be any easier? We say here: “Mate, I need map on this page. Also don’t forget to give me script that integrates the map with my page.”.<br />
<br />
Ok. Now we came to the last point – 6. This is freaking easy as well:<br />
<pre class="csharpcode">- if (Model.CanEdit)
  ^ script = ""
  ^ css = ""
  ^ needMap = true
  ^ script2 = "map-integration"</pre>
We tell here: “If current user can edit this page then please add default script and css for the controller, include map and integration script for it.”<br />
And the possibilities to play with it are unlimited. How does this magic happen?<br />
All is defined in the NHAML “master page” which is called <i>layout</i>. And here it is:<br />
<pre class="csharpcode">^ string css = null;
^ string css2 = null;
^ string script = null;
^ string script2 = null;
^ bool needMaps = false;
%html{xmlns="http://www.w3.org/1999/xhtml"}
  %head
    != Html.Content().EmitCommonStyles()
    != css==null ? null : Html.Content().EmitCss(css)
    != css2==null ? null : Html.Content().EmitCss(css2)
    != needMaps ? "<span class="kwrd">&lt;</span><span class="html">script</span> <span class="attr">type</span><span class="kwrd">='text/javascript'</span> <span class="attr">src</span><span class="kwrd">='http://maps.google.com/maps/api/js?sensor=false'</span><span class="kwrd">&gt;&lt;/</span><span class="html">script</span><span class="kwrd">&gt;</span>" : null

    != Html.Content().EmitCommonScripts()    
    != script==null ? null : Html.Content().EmitScript(script)
    != script2==null ? null : Html.Content().EmitScript(script2)
    
  %body  </pre>
<br />
I don’t want to explain this – go figure. This is easy as well… Or… ok. in 2 words:<br />
<ol>
<li>We define .NET variable in the layout using “^” symbol. </li>
<li>The variables defined using “^” are accessible in any page. </li>
<li>There are 2 types of code blocks in NHAML: 
    <br />
<ol>
<li>starts with “-” - evaluates in its own scope (for simplicity let’s say its scope of page of another block); </li>
<li>starts with “^” – evaluates in the global scope AND before all other scoped blocks (eg: “-”). </li>
</ol>
</li>
</ol>
Thanks to <a href="http://twitter.com/SimonCropp" target="_blank">Simon</a> for explaining this.<br />
Exercise for you: make the layout to satisfy these requirements:<br />
<ol>
<li>Some pages may have page title (the one shown in the browser): “Action – Area – SiteName” </li>
<li>Some pages may have page title: “Action – SiteName” or “Area – SiteName”. </li>
<li>If neither Action nor Area are provided site will have in its title “SiteName”. </li>
<li>A page should not be required to specify anything if it doesn’t need to. So if a page doesn’t provide neither Action nor Area it should not have any code at all to handle this. </li>
</ol>
Can you do that? [Tip: NHAML supports extension methods as well.]</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NHAML – Tips]]></title>
    <link href="http://ApproachE.com/blog/nhaml-tips/"/>
    <updated>2009-07-08T11:06:00+10:00</updated>
    <id>http://ApproachE.com/blog/nhaml-tips</id>
    <content type="html"><![CDATA[<div class='post'>
I’ve working with NHAML for some time. I <a href="http://dnagir.blogspot.com/2009/07/nhaml-impressions.html" target="_blank">just love</a> it.<br />
Now I want to share some issues that I have faced and how I solved them.<br />
This is small Question/Answer list:<br />
<hr />
Q1: What is NHAML analogue of <br />
<pre class="csharpcode"><span class="asp">&lt;%</span>= Html.ActionLink(<span class="str">"Home"</span>, <span class="str">"Index"</span>, <span class="str">"Home"</span>)<span class="asp">%&gt;</span></pre>
<style type="text/css">
.csharpcode, .csharpcode pre
{
 font-size: small;
 color: black;
 font-family: consolas, "Courier New", courier, monospace;
 background-color: #ffffff;
 /*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
 background-color: #f4f4f4;
 width: 100%;
 margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<br />
A1: != Html.ActionLink("Home", "Index", "Home")<br />
<hr />
Q2: What is NHAML analogue of 
  <br />
<pre class="csharpcode"><span class="asp">&lt;%</span>= Server.HtmlEncode(Model.Name) <span class="asp">%&gt;</span></pre>
A2: &amp;= Model.Name<br />
<hr />
Q3: What is analogue of<br />
<pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">a</span> <span class="attr">href</span><span class="kwrd">='&lt;%= Html.Content().HomeLink %&gt;' target=’_blank’</span><span class="kwrd">&gt;</span>Home<span class="kwrd">&lt;/</span><span class="html">a</span><span class="kwrd">&gt;</span></pre>
A3: More complex code should be wrapped in #{}: 
  <br />%a { href=#{Html.Content().HomeLink} target=”_blank”} Home<br />
BUT see Q4<br />
<hr />
Q4: What is analogue of<br />
<pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">a</span> <span class="attr">href</span><span class="kwrd">='&lt;%=Model.ProductUrl %&gt;'</span> <span class="attr">target</span><span class="kwrd">='_blank'</span><span class="kwrd">&gt;</span><span class="asp">&lt;%</span>= Server.HtmlEncode(Model.ProductName) <span class="asp">%&gt;</span> <span class="kwrd">&lt;/</span><span class="html">a</span><span class="kwrd">&gt;</span></pre>
A4: Simple code may not be wrapped in anything: 
  <br />%a { href=Model.ProductUrl target=”_blank”} &amp;= Home<br />
<hr />
Q5: What is analogue of:<br />
<pre class="csharpcode"><span class="asp">&lt;%</span> <span class="kwrd">foreach</span>(Product currentProduct <span class="kwrd">in</span> Model.Products) {<span class="asp">%&gt;</span>
  <span class="asp">&lt;%</span> Html.RenderPartial(<span class="str">"ProductInfo"</span>, currentProduct); <span class="asp">%&gt;</span>
<span class="asp">&lt;%</span> }; <span class="asp">%&gt;</span></pre>
A5: Local variables (currentProduct) are available in partial views (_ProductInfo):<br />
<pre class="csharpcode">- foreach(Product currentProduct in Model.Products)
  _ ProductInfo</pre>
<hr />
Q6: What about HTML encoding?<br />
A6: See the <a href="http://code.google.com/p/nhaml/wiki/NHamlLanguageReference" target="_blank">reference</a> for more info. Shortly: if you want to encode – use “&amp;=”, if you don’t – use “!=”.<br />
<hr />
Q7: Can I use WebForms View engine and NHAML?<br />
A7: Yes. No problem with that. In fact I do it as a fallback in case something goes wrong (hope it will never happen :) ).<br />
<hr />
Q8: Any integration with Visual Studio<br />
A8: At the moment I am aware of Visual Studio <a href="http://code.google.com/p/nhaml/wiki/VisualStudioPlugin" target="_blank">syntax highlighter</a> plug-in only .<br />
<hr />
This should be enough for now :)</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NHAML – impressions]]></title>
    <link href="http://ApproachE.com/blog/nhaml-impressions/"/>
    <updated>2009-07-08T10:34:00+10:00</updated>
    <id>http://ApproachE.com/blog/nhaml-impressions</id>
    <content type="html"><![CDATA[<div class='post'>
I have introduced the <a href="http://code.google.com/p/nhaml/" target="_blank">NHAML</a> into a new project. Just can’t silently ignore it. This is great thing. Really great. It does save time and helps to concentrate on the presentation of the view in ASP.NET MVC. I just love. Additionally it has great coverage of unit tests and code looks really good. So I believe in its quality.<br />
<br />
This is the quote:<br />
<blockquote>
<i>"Haml is a markup language that‘s used to cleanly and simply describe the XHTML of any web document, without the use of inline code. Haml functions as a replacement for inline page templating systems such as PHP, ERB, and ASP. However, Haml avoids the need for explicitly coding XHTML into the template, because it is actually an abstract description of the XHTML, with some code to generate dynamic content."</i><br />
In other words, NHaml is an external DSL for XHTML. It’s primary qualities are it’s simplicity, terseness, performance and that it outputs nicely formatted XHTML. Additionally, the NHaml view engine provides support for Rails style layouts and partials and ships with an ASP.NET MVC view engine. </blockquote>
<br />
Why do you want to use NHAML:<br />
<ul>
<li>Want to write less code. </li>
<li>Do not want to repeat the HTML closing tags. </li>
<li>Want to generate valid XHTML easier. </li>
<li>Tired of chaging type of the model in ASPX.</li>
<li>Tired of writing      <br />
<pre class="csharpcode"><span class="asp">&lt;%</span>= Server.HtmlEncode(Model.Name) <span class="asp">%&gt;</span></pre>
<style type="text/css">
.csharpcode, .csharpcode pre
{
 font-size: small;
 color: black;
 font-family: consolas, "Courier New", courier, monospace;
 background-color: #ffffff;
 /*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
 background-color: #f4f4f4;
 width: 100%;
 margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style><style type="text/css">
.csharpcode, .csharpcode pre
{
 font-size: small;
 color: black;
 font-family: consolas, "Courier New", courier, monospace;
 background-color: #ffffff;
 /*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
 background-color: #f4f4f4;
 width: 100%;
 margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

  </li>
<li>Want to keep it simple. </li>
<li>Want mark-up to drive the rules and not code. </li>
</ul>
Why you don’t:<br />
<ul>
<li>Want to have intelly-sence in the view. </li>
<li>Want to use Visual Studio MVC integrated features: 
    <br />
<ul>
<li>Go to Controller (from view) </li>
<li>Go to View (from controller action) </li>
<li>Add view (from controller action) </li>
</ul>
</li>
<li>Don’t want to bother with new syntax (even when it takes minutes to learn) </li>
</ul>
I thought about Spark view engine. It promotes that the presentation drives the rules but not code. But still NHAML suits me&nbsp; much better and it drives the presentation much better.<br />
You’ll find enough on the Internet on the NHAML. Don’t forget to view the <a href="http://code.google.com/p/nhaml/wiki/NHamlLanguageReference" target="_blank">reference</a> as there are some changes to the syntax that might not be reflected in topics on the net.<br />
Also don’t forget to say thanks to guys working on it by <a href="http://code.google.com/p/nhaml/" target="_blank">donating</a> (see the button at the bottom) them.<br />
I plan to post couple of tips on it later.</div>

]]></content>
  </entry>
  
</feed>
