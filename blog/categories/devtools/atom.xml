<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[devtools | Art Of Programming]]></title>
  <link href="http://ApproachE.com/blog/categories/devtools/atom.xml" rel="self"/>
  <link href="http://ApproachE.com/"/>
<<<<<<< HEAD
  <updated>2013-07-10T11:49:46+10:00</updated>
=======
  <updated>2012-10-09T14:32:42+11:00</updated>
>>>>>>> 6472a47d4858bde71a9f9f6992c1c60a4d7205e1
  <id>http://ApproachE.com/</id>
  <author>
    <name><![CDATA[Dmytrii Nagirniak]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Increase your productivity in Vim and Terminal]]></title>
    <link href="http://ApproachE.com/blog/increase-your-productivity-with-vim-and-terminal/"/>
    <updated>2012-03-12T06:30:00+11:00</updated>
    <id>http://ApproachE.com/blog/increase-your-productivity-with-vim-and-terminal</id>
    <content type="html"><![CDATA[<p>This post will give you <em>minimal</em> suggestions that
you can apply in your daily work to immediately increase your productivity.</p>

<<<<<<< HEAD
<p>I&rsquo;m writing this after watching the <a href="http://blog.steveklabnik.com/posts/2012-02-22-two-pomodoros">Steve Klabnik&rsquo;s screencast</a>
where he is working <em>&ldquo;in a wild&rdquo;</em>.</p>
=======
<p>I'm writing this after watching the <a href="http://blog.steveklabnik.com/posts/2012-02-22-two-pomodoros">Steve Klabnik's screencast</a>
where he is working <em>"in a wild"</em>.</p>
>>>>>>> 6472a47d4858bde71a9f9f6992c1c60a4d7205e1

<p>I love this idea and have done videoing
how I work on a little <a href="http://approache.com/blog/rails-plugin-with-tested-assets/">ios-checkboxes</a>
and <a href="http://approache.com/blog/knockoutjs-validations-video/">knockout-rails</a>.</p>

<p>The world would an awesome place if more people (yes, including <strong>you</strong>) would start sharing the way they work.
Well done Steve!</p>

<p>But today I want to focus on just a few things that should dramatically improve the productivity.</p>

<!-- more -->


<h1>Vim productivity</h1>

<p><blockquote><p>Vim is one of a select bunch of tools for which I have no substitute.<br/>It is a brilliant piece of work!</p><footer><strong>Biju Chacko</strong> <cite>Vim Quotes</cite></footer></blockquote></p>

<p>The power of vim is huge. Very small number of people actually do know how to use most of it.
<<<<<<< HEAD
I&rsquo;m certainly not one of them.</p>
=======
I'm certainly not one of them.</p>
>>>>>>> 6472a47d4858bde71a9f9f6992c1c60a4d7205e1

<p>But let me suggest some of the things that keep myself more productive.</p>

<h2>Remap your CapsLock key to Control</h2>

<p><em>Why?</em> Because the <em>Control</em> key is located extremely inconveniently
while <em>CapsLock</em> is right under your baby-finger. All the time.</p>

<p><em>How?</em> Follow <a href="http://www.manicai.net/comp/swap-caps-ctrl.html">this guide</a>.</p>

<p>I blindly trusted the <em>command</em> given by <a href="http://twitter.com/garybernhardt">Garry Bernhard</a>
<<<<<<< HEAD
in his <a href="http://www.destroyallsoftware.com/screencasts/catalog/some-vim-tips">DestroyAllSoftware &ndash; Some Vim Tips</a>
on this. Never regretted.</p>

<p>Don&rsquo;t think about it. Just do it and I&rsquo;m sure you won&rsquo;t go back.</p>

<h2>Use Vim jumps</h2>

<p><em>Why?</em> A lot of times you need to jump forth and back between 2 place or go to where you&rsquo;ve been a minute ago.
A log of people just find that line/file again. It&rsquo;s a waste of time.</p>
=======
in his <a href="http://www.destroyallsoftware.com/screencasts/catalog/some-vim-tips">DestroyAllSoftware - Some Vim Tips</a>
on this. Never regretted.</p>

<p>Don't think about it. Just do it and I'm sure you won't go back.</p>

<h2>Use Vim jumps</h2>

<p><em>Why?</em> A lot of times you need to jump forth and back between 2 place or go to where you've been a minute ago.
A log of people just find that line/file again. It's a waste of time.</p>
>>>>>>> 6472a47d4858bde71a9f9f6992c1c60a4d7205e1

<p><em>How?</em></p>

<ul>
<li><code>Ctrl-o</code> and <code>Ctrl-i</code> to go to the previous/next location you jumped to.</li>
<<<<<<< HEAD
<li><code>``</code> (two backticks) &ndash; jump back to where you were.</li>
<li><code>gi</code> &ndash; go to the last place you inserted a text.</li>
=======
<li><code>``</code> (two backticks) - jump back to where you were.</li>
<li><code>gi</code> - go to the last place you inserted a text.</li>
>>>>>>> 6472a47d4858bde71a9f9f6992c1c60a4d7205e1
</ul>


<h2>Use appropriate Vim navigations</h2>

<p><em>Why?</em> Typing <code>l</code> (move right one symbol) or similar multiple times is waste of time.</p>

<p><em>How?</em></p>

<ul>
<<<<<<< HEAD
<li><code>{</code> and <code>}</code> &ndash; jump <em>paragraph</em> back and forth.</li>
<li><code>Ctrl-F/B</code> &ndash; move one <em>screen</em> back and forth.</li>
<li><code>Ctrl-E/Y</code> &ndash; <em>scroll</em> the screen.</li>
<li><code>*</code> (star) &ndash; search for the word under cursor, then <code>n/p</code> to jump to next/previous.</li>
<li>add <code>imap jj &lt;Esc&gt;</code> to your <code>.vimrc</code> and don&rsquo;t use <code>Esc</code> anymore.</li>
=======
<li><code>{</code> and <code>}</code> - jump <em>paragraph</em> back and forth.</li>
<li><code>Ctrl-F/B</code> - move one <em>screen</em> back and forth.</li>
<li><code>Ctrl-E/Y</code> - <em>scroll</em> the screen.</li>
<li><code>*</code> (star) - search for the word under cursor, then <code>n/p</code> to jump to next/previous.</li>
<li>add <code>imap jj &lt;Esc&gt;</code> to your <code>.vimrc</code> and don't use <code>Esc</code> anymore.</li>
>>>>>>> 6472a47d4858bde71a9f9f6992c1c60a4d7205e1
</ul>


<h2>Changing case and repeating a command</h2>

<p><em>Why?</em> Because a lot of things can be done much more efficiently.</p>

<p><em>How?</em></p>

<ul>
<<<<<<< HEAD
<li><code>~</code> (tilde) &ndash; toggle the casing of a letter/selection (upper-case/down-case).</li>
<li><code>.</code> (dot) &ndash; repeat the last set of commands (use in a combination with search, such as <code>*</code>, and jumps).</li>
=======
<li><code>~</code> (tilde) - toggle the casing of a letter/selection (upper-case/down-case).</li>
<li><code>.</code> (dot) - repeat the last set of commands (use in a combination with search, such as <code>*</code>, and jumps).</li>
>>>>>>> 6472a47d4858bde71a9f9f6992c1c60a4d7205e1
</ul>


<h2>Temporarily map commands you run</h2>

<<<<<<< HEAD
<p><em>Why?</em> Because you don&rsquo;t want to type the same command over and over again.</p>
=======
<p><em>Why?</em> Because you don't want to type the same command over and over again.</p>
>>>>>>> 6472a47d4858bde71a9f9f6992c1c60a4d7205e1

<p><em>How?</em> One example is <code>nmap &lt;leader&gt;s :! bundle exec rspec % --colour --focus&lt;cr&gt;</code>.
This will run the current spec file when you press <code>,s</code> (in my case).</p>

<p><strong>Rule of thumb</strong>: if you do something more then twice in the terminal outside of Vim, map it using <code>nmap</code>.
<<<<<<< HEAD
Don&rsquo;t switch windows, <em>don&rsquo;t lose your context</em>.</p>
=======
Don't switch windows, <em>don't lose your context</em>.</p>
>>>>>>> 6472a47d4858bde71a9f9f6992c1c60a4d7205e1

<h1>Terminal productivity</h1>

<p>Just a couple of things here.</p>

<h2>Use iTerm2</h2>

<p><em>Why?</em> At least because you can split window without losing the context.</p>

<p><em>How?</em> Install it from the <a href="http://www.iterm2.com/">iterm2.com</a> site (or even use tmux!).</p>

<p>Use <code>Ctrl-D/Ctrl-Shift-D</code> (while in Vim or any iTerm tab/window) to split the current terminal window opening a new shell but still being able to see what you are currently working on.</p>

<h2>Use <code>!!</code> (double bang) or arrow up</h2>

<<<<<<< HEAD
<p><em>Why?</em> Because it repeats the previous command that you should have mapped in Vim but didn&rsquo;t.</p>
=======
<p><em>Why?</em> Because it repeats the previous command that you should have mapped in Vim but didn't.</p>
>>>>>>> 6472a47d4858bde71a9f9f6992c1c60a4d7205e1

<p><em>How?</em> Just type <code>!!</code> and it will execute last command.
This is simple, but strangely enough I can see people are actually retyping commands.</p>

<h2>Enable Vim mode in bash</h2>

<p><em>Why?</em> Because you navigate in the terminal too. And Vim mode makes it seamless.</p>

<p><em>How</em>? <a href="http://linuxart.com/log/archives/2005/10/13/super-useful-inputrc/">Create an inputrc file</a> and
add <code>set editing-mode vi</code> to it.</p>

<h1>Useful links</h1>

<ul>
<<<<<<< HEAD
<li><a href="http://blog.sanctum.geek.nz/vim-anti-patterns/">Vim anti-patterns</a> &ndash; must-read if you want to be better at Vim.</li>
<li><a href="http://peepcode.com/products/smash-into-vim-i">Smash into Vim</a> &ndash; always awesome PeepCode series on Vim.</li>
<li><a href="https://workshops.thoughtbot.com/vim">Vim for Rails developers</a> &ndash; nice overview of the plug-ins and more productive use of Vim.</li>
<li><a href="http://peepcode.com/products/meet-the-command-line">Meet the Command Line</a> and <a href="http://peepcode.com/products/advanced-command-line">Advanced Command Line</a> &ndash; great screencasts if you want to get better with command line.</li>
<li><a href="http://www.destroyallsoftware.com">DestroyAllSoftware screencasts</a> &ndash; screencasts covering Vim, Unix, Ruby.</li>
</ul>


<p>The DestroyAllSoftware stands out here because Gary covers range of extremely focused, professional topics that you can&rsquo;t ignore.</p>
=======
<li><a href="http://blog.sanctum.geek.nz/vim-anti-patterns/">Vim anti-patterns</a> - must-read if you want to be better at Vim.</li>
<li><a href="http://peepcode.com/products/smash-into-vim-i">Smash into Vim</a> - always awesome PeepCode series on Vim.</li>
<li><a href="https://workshops.thoughtbot.com/vim">Vim for Rails developers</a> - nice overview of the plug-ins and more productive use of Vim.</li>
<li><a href="http://peepcode.com/products/meet-the-command-line">Meet the Command Line</a> and <a href="http://peepcode.com/products/advanced-command-line">Advanced Command Line</a> - great screencasts if you want to get better with command line.</li>
<li><a href="http://www.destroyallsoftware.com">DestroyAllSoftware screencasts</a> - screencasts covering Vim, Unix, Ruby.</li>
</ul>


<p>The DestroyAllSoftware stands out here because Gary covers range of extremely focused, professional topics that you can't ignore.</p>
>>>>>>> 6472a47d4858bde71a9f9f6992c1c60a4d7205e1

<p>Hope this post will help you to leverage your tools a bit better and will teach you a thing or two.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrating from Blogger to Octopress]]></title>
    <link href="http://ApproachE.com/blog/migrating-from-blogger-to-octopress/"/>
    <updated>2012-03-04T20:09:00+11:00</updated>
    <id>http://ApproachE.com/blog/migrating-from-blogger-to-octopress</id>
<<<<<<< HEAD
    <content type="html"><![CDATA[<p>I&rsquo;ve been a Blogger user since 2006 and decided to switch over to something more geeky.</p>
=======
    <content type="html"><![CDATA[<p>I've been a Blogger user since 2006 and decided to switch over to something more geeky.</p>
>>>>>>> 6472a47d4858bde71a9f9f6992c1c60a4d7205e1

<p>This post will cover some of the reasons for that and also will provide an overview
of how to migrate from Blogger to Octopress.</p>

<h2>What do I want to achieve?</h2>

<ul>
<<<<<<< HEAD
<li><strong>Merging</strong> my personal site and blog &ndash; those were totally separate, unrelated entities, not good enough.</li>
=======
<li><strong>Merging</strong> my personal site and blog - those were totally separate, unrelated entities, not good enough.</li>
>>>>>>> 6472a47d4858bde71a9f9f6992c1c60a4d7205e1
<li>Write <strong>more often</strong>, using the same tools I use on a daily basis (Vim ATM).</li>
<li>More <strong>hands-on</strong> kind of blogging, I actually do want to do the dirty work messing with HTML/CSS etc.</li>
</ul>


<h2>Reasons for switching:</h2>

<ul>
<li><strong>Markdown, HAML, bare bones HTML</strong>. I wanted to have a bit more control over how my blog looks like.</li>
<<<<<<< HEAD
<li><strong>Blogging software</strong> isn&rsquo;t good enough. Unfortunately I haven&rsquo;t found yet a good <strong>geeky</strong> S/W for blogging.</li>
=======
<li><strong>Blogging software</strong> isn't good enough. Unfortunately I haven't found yet a good <strong>geeky</strong> S/W for blogging.</li>
>>>>>>> 6472a47d4858bde71a9f9f6992c1c60a4d7205e1
<li><strong>Easier to write</strong> from Vim. Writing is much easier, not moving my hands off the keyboard and staying in the terminal.</li>
<li><strong>Version controlled</strong>. Nice to have, but not crucial for me.</li>
</ul>


<<<<<<< HEAD
<h2>Why I didn&rsquo;t want to switch:</h2>

<ul>
<li>Losing <strong>PageRank</strong>, which shouldn&rsquo;t really be an issue (see below).</li>
=======
<h2>Why I didn't want to switch:</h2>

<ul>
<li>Losing <strong>PageRank</strong>, which shouldn't really be an issue (see below).</li>
>>>>>>> 6472a47d4858bde71a9f9f6992c1c60a4d7205e1
<li><strong>Uncerteinities</strong>. So now I have to maintain it myself? Take care of updates? Hell, yeah!</li>
<li><strong>Self-hosted</strong>. Nothing to say here.</li>
<li>I have never ever needed to do anything with the blog in terms of maintenance while being on Blogger. I really just worked.</li>
</ul>


<p>Switching to a self-hosted blog/site will require a bit of involvement from me.
<<<<<<< HEAD
But this is something I am willing to take. It&rsquo;s time to take my ass out of the comfy couch of Blogger.</p>
=======
But this is something I am willing to take. It's time to take my ass out of the comfy couch of Blogger.</p>
>>>>>>> 6472a47d4858bde71a9f9f6992c1c60a4d7205e1

<h2>So how to actually migrate?</h2>

<p>I would split it into the following larger steps:</p>

<ol>
<li>Preparation.</li>
<li>Deployment.</li>
<li>Finalisation.</li>
</ol>


<h2>Preparation</h2>

<p>At this stage you need to <a href="http://octopress.org/docs/setup">setup the Octopress itself</a>, <a href="http://octopress.org/docs/configuring">configure</a> it and import your existing posts from Blogger.</p>

<<<<<<< HEAD
<p>I won&rsquo;t go into details how to <a href="http://octopress.org/docs/theme">customise</a> and set it up, you see the links.</p>

<p>I&rsquo;ll go directly into the migrating the Blogger posts over to Octopress.</p>
=======
<p>I won't go into details how to <a href="http://octopress.org/docs/theme">customise</a> and set it up, you see the links.</p>

<p>I'll go directly into the migrating the Blogger posts over to Octopress.</p>
>>>>>>> 6472a47d4858bde71a9f9f6992c1c60a4d7205e1

<p>What you need to do is</p>

<ol>
<li>Export your Blogger posts.</li>
<li>Use <a href="https://gist.github.com/1765496">this script</a> to import it into Octopress.</li>
</ol>


<<<<<<< HEAD
<p>After you do this, all you&rsquo;ll get a bunch of posts that are already part of your site.
=======
<p>After you do this, all you'll get a bunch of posts that are already part of your site.
>>>>>>> 6472a47d4858bde71a9f9f6992c1c60a4d7205e1
Double check whether everything is correct or not. You may want to tweak the script for your needs.</p>

<p><em>Note</em> that the script also imports the comments, but in a little ugly way.
(<em>TIP</em>, you may want to disable commenting before exporting the posts from Blogger).</p>

<<<<<<< HEAD
<p>Next thing you want to do is to update your Octopress RSS feed URL so that existing subscribers won&rsquo;t be lost.
I am using FeedBurner and I had to set <code>subscribe_rss: http://feeds.feedburner.com/DmitriyNagirnyak</code> in the <code>_config.yml</code></p>

<p>Now that you&rsquo;ve got your posts, you want to set-up the redirection from your blog to your new site.</p>

<p>I prepared <a href="https://github.com/dnagir/approache-redirects/blob/master/app.rb">simple Sinatra application</a> for that.
You definitely want to fork and tweak it to your needs. Note that I&rsquo;m not using the <code>blog/YYYY/MM/DD/title</code> format.
I just use the <code>blog/title</code> format.</p>

<p>Now go ahead and deploy this app. I&rsquo;ve decided to use Heroku for that which is the simplest and easiest way to go.</p>
=======
<p>Next thing you want to do is to update your Octopress RSS feed URL so that existing subscribers won't be lost.
I am using FeedBurner and I had to set <code>subscribe_rss: http://feeds.feedburner.com/DmitriyNagirnyak</code> in the <code>_config.yml</code></p>

<p>Now that you've got your posts, you want to set-up the redirection from your blog to your new site.</p>

<p>I prepared <a href="https://github.com/dnagir/approache-redirects/blob/master/app.rb">simple Sinatra application</a> for that.
You definitely want to fork and tweak it to your needs. Note that I'm not using the <code>blog/YYYY/MM/DD/title</code> format.
I just use the <code>blog/title</code> format.</p>

<p>Now go ahead and deploy this app. I've decided to use Heroku for that which is the simplest and easiest way to go.</p>
>>>>>>> 6472a47d4858bde71a9f9f6992c1c60a4d7205e1

<p>But <strong>make sure you deploy to the domain of your blog</strong>. For example, my Blogger blog was hosted on the <code>blog.approache.com</code> and I deployed it to this domain.</p>

<p>It of course will not take any affect until you change your DNS settings.
<<<<<<< HEAD
But this will enable permanent redirects immediately when you&rsquo;ll do that (thus preserving all your old links).</p>
=======
But this will enable permanent redirects immediately when you'll do that (thus preserving all your old links).</p>
>>>>>>> 6472a47d4858bde71a9f9f6992c1c60a4d7205e1

<h2>Deployment</h2>

<p>By now you should have:</p>

<ul>
<li>The Octopress site ready to go (with all the posts migrated).</li>
<li>Blogger redirection deployed.</li>
</ul>


<<<<<<< HEAD
<p>It&rsquo;s time to go ahead and actually <a href="http://octopress.org/docs/deploying">deploy</a> your Octopress site.</p>
=======
<p>It's time to go ahead and actually <a href="http://octopress.org/docs/deploying">deploy</a> your Octopress site.</p>
>>>>>>> 6472a47d4858bde71a9f9f6992c1c60a4d7205e1

<p>I wanted to merge <code>blog.approache.com</code> into the <code>approache.com</code> so I deployed the new site to <code>approache.com</code>
(hosted on <em>Github Pages</em>).</p>

<p>Now make sure everything is working properly and you have dome everything right.
<<<<<<< HEAD
If you&rsquo;ve missed something out, then go ahead and fix it. Then redeploy.</p>

<p>This may take a couple of iterations to get it right.</p>

<p>The point here is that you basically now have 2 blogs &ndash; one is the old Blogger, the other &ndash; the Octopress.
You can experiment with the Octopress here, but don&rsquo;t do it for too long (I would say max of 1 day).</p>

<p>After you&rsquo;re happy with the new site and blog it&rsquo;s time to finalise everything.</p>
=======
If you've missed something out, then go ahead and fix it. Then redeploy.</p>

<p>This may take a couple of iterations to get it right.</p>

<p>The point here is that you basically now have 2 blogs - one is the old Blogger, the other - the Octopress.
You can experiment with the Octopress here, but don't do it for too long (I would say max of 1 day).</p>

<p>After you're happy with the new site and blog it's time to finalise everything.</p>
>>>>>>> 6472a47d4858bde71a9f9f6992c1c60a4d7205e1

<h2>Finalisation</h2>

<p>Next step is to make sure your subscribers will still receive updates through the FeedBurner.
For that:</p>

<ol>
<li>Sign in into FeedBurner.</li>
<li>Replace the original feed URL by the Octopress' one (which is something like <code>http://ApproachE.com/atom.xml</code>).</li>
</ol>


<p>By now you should be ready to switch your your Blogger domain to your main site.</p>

<p>You probably will do it simply by changing your DNS record to point to your Octopress server.
In my case I had to change the DNS record from <code>blog - CNAME - ghs.google.com</code> to <code>. - A - 207.97.227.245</code> (dot means top-level domain here).</p>

<<<<<<< HEAD
<p>Since you&rsquo;ve already deployed your redirection app, all the old links will still work.
=======
<p>Since you've already deployed your redirection app, all the old links will still work.
>>>>>>> 6472a47d4858bde71a9f9f6992c1c60a4d7205e1
All the PageRank should be preserved.</p>

<p>The very last thing to do is to <strong>disable the Blogger</strong> if you want to.</p>

<h2>Summary</h2>

<<<<<<< HEAD
<p>Switching to Octopress was relatively painless thanks to Blogger&rsquo;s ability to export posts and the script that could import it into Octopress.</p>
=======
<p>Switching to Octopress was relatively painless thanks to Blogger's ability to export posts and the script that could import it into Octopress.</p>
>>>>>>> 6472a47d4858bde71a9f9f6992c1c60a4d7205e1

<p>Preserving URL was relatively easy too and the rest was left to FeedBurner and DNS hosting.</p>

<p>Hope this is helpful for you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KnockoutJS Validations Screencast]]></title>
    <link href="http://ApproachE.com/blog/knockoutjs-validations-video/"/>
    <updated>2011-12-22T20:31:00+11:00</updated>
    <id>http://ApproachE.com/blog/knockoutjs-validations-video</id>
    <content type="html"><![CDATA[<div class='post'>
<div>
If you wonder how you can use KnockoutJS with Rails in a similar way to Backbone.js or Spine.js then <a href="http://www.youtube.com/watch?v=cJzQl-bpmUI">watch the video</a>. It also shows how easy it is to apply client side validations that work alongsite with the server-side validations.<br />
<br />

<iframe width="560" height="315" src="http://www.youtube.com/embed/cJzQl-bpmUI?hd=1" frameborder="0" allowfullscreen></iframe>

<div>
Have a look at the <a href="https://github.com/dnagir/knockout-rails">knockout-rails</a> project for more details.
</div>

</div></div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Dmytrii Nagirniak</div>
<div class='content'>
This is actually <a href="https://gist.github.com/9ca5dce0524927d69655" rel="nofollow">one of the options</a> of validating in the background: <br /><br />It doesn&#39;t include the bindings, but gives idea how it can be done. Easier than I thought actually.</div>
</div>
<div class='comment'>
<div class='author'>Dmytrii Nagirniak</div>
<div class='content'>
Pre-validating on the server can technically be done with the Model Events. But it&#39;s not supported out of the box.<br /><br />It is a good idea, but there&#39;s a bit more complexity involved on both client and server. But I&#39;ll gladly accept pull requests to knockout-rails if somebody needs to support that.</div>
</div>
<div class='comment'>
<div class='author'>Aleksey Gureiev</div>
<div class='content'>
This comment has been removed by the author.</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Issues switching to JRuby from MRI 1.9]]></title>
    <link href="http://ApproachE.com/blog/issues-switching-to-jruby-from-mri-19/"/>
    <updated>2011-11-29T11:51:00+11:00</updated>
    <id>http://ApproachE.com/blog/issues-switching-to-jruby-from-mri-19</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">
<b>UDPATE</b>: The reason for switching to JRuby the native neo4j API. Have to use REST API with MRI.<br />
<br />
This is just a quick recap of what issues I have had trying to switch existing app from MRI Ruby (1.9.3) to JRuby (1.6.4).<br />
<br />
Unfortunately I stepped back and didn't want to spend more time as it felt an unbreakable chain of issues. Resolving one, you think "huh, awesome". But very soon you hit the next.<br />
And I couldn't see it stopping.<br />
<br />
<b>But PLEASE bear in mind</b> that I only spent a couple of hours on that. With a little bit more persistence, you may be able to the end of the tunnel.<br />
<br />
The overall impression is that it is not a big deal really. The problems arise when trying to use other libraries. And unfortunately, not all of the gems <b>care deep enough to support JRuby</b>. And this is the biggest issue in my opinion, there are very little issues with JRuby itself. The transition (from the syntax perspective) was extremely easy.<br />
<br />
The application is pretty standard Rails 3.1 app that uses gems like Dragonfly, inherited_resources, cancan, paper_trail, Authlogic, CoffeeScript, Haml, Sass, Formtastic etc. For testing - things like rspec-rails, cucumber-rails, capybara-webkit, guard (rspec and cucumber), database_cleaner etc.<br />
<br />
So here is a quick list of the things that I faced on my way.<br />
<br />
Before everything else I enabled support for 1.9 syntax in JRuby (export JRUBY_OPTS=--1.9).<br />
<br />
It all first started with <a href="https://gist.github.com/1402753">the weird issue</a> where the <b>wrong arguments were passed to RSpec shared example</b>.<br />
Unfortunately I did not figure out why it happened and just patched it as you can see in the comments there.<br />
<script src="https://gist.github.com/1402753.js?file=sample_spec.rb">
</script>

<br />
<br />
<br />
After fixing this issue I had another one related to <b>database_cleaner</b>. So I ended up with a <a href="https://github.com/bmabey/database_cleaner/pull/83">pull request</a> that worked for me.<br />
<br />
The other issue was a<b> huge stack trace</b>. I scrolled 3 pages in the terminal to get to the top. Most of that stack trace is deep inside Java. Additionally I got <b>wrong line number</b> on exception. This "features/step_definitions/company_steps.rb:234" makes me thing that the exception is at line 234. But that file only had 49 lines of code. Now, go figure.<br />
<br />
Going on... <a href="https://github.com/colszowka/simplecov">SimpleCov</a> gem didn't work out of the box and gave the warning that I need to enable debugging. That's fine and understandable. But after half an hour of debugging of unrelated exception, it turned out that <b>SimpleCove threw an exception</b> because of that. So had to go and explicitly disable it.<br />
<br />
Then I managed to run all of my specs. But I was pretty surprised how <b>slow</b> it was:<br />
<pre><code>
# rvm use 1.9.3
# time rspec # real=14s, rspec time ~ 12s

# rvm use jruby
# time rspec # real=52s, rspec time ~ 30s

</code>
</pre>
But this is expected as JRuby doesn't have enough time to optimise here. It should be much better in production. But it will be also shit slow after deployment.<br />
Ok. That's fine. <b>I can trust it's fast</b>.<br />
<br />
Then I tried running the cucumber specs and had to file the <a href="http://jira.codehaus.org/browse/JRUBY-6237">issue</a> to support <b>new Ruby 1.9.3 syntax</b> (a = b = f 1). Not a big deal, easily fixed with parens: a = b = f(1).<br />
<br />
Next and the <b>final issue</b> - I could not run the <b>headless cucumber specs</b> (capybara-webkit). It just got stuck (no CPU used) and feels like there is a <b>dead-lock</b> or something similar.<br />
<br />
I couldn't see way of fixing it easily and decided that for now I am <b>done with</b> it. So going <b>back to Ruby 1.9.3</b>.<br />
<br />
<br />
<b>To summarise</b>, I <b>did not feel like it's a problem</b> to switch to JRuby. But it's really a <b>big deal to actually use</b> it due to the number of <b>C extensions</b> that JRuby doesn't really support.<br />
<br />
Again, to emphasise, there is nothing horribly wrong with JRuby and it seems to be pretty good. But the real showstoppers are the C extensions.</div></div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Dmytrii Nagirniak</div>
<div class='content'>
Totally with you on this. But real world seems to be a bit different :)</div>
</div>
<div class='comment'>
<div class='author'>Postmodern</div>
<div class='content'>
Yet another reason to avoid C-extensions. When selecting dependencies for a new project, I prefer to select pure-Ruby libraries or FFI bindings (https://github.com/ffi/ffi#readme). Pure-Ruby libraries should be faster on Rubinius/JRuby. FFI bindings work perfectly on both MRI and JRuby.<br /><br />If developers want faster Ruby code, they should help make MRI faster (or switch to Rubinius/JRuby), instead of writing more code in C.</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Securities and Exchange Commission – comment on comment]]></title>
    <link href="http://ApproachE.com/blog/securities-and-exchange-commission/"/>
    <updated>2010-10-19T10:30:00+11:00</updated>
    <id>http://ApproachE.com/blog/securities-and-exchange-commission</id>
    <content type="html"><![CDATA[<div class='post'>
<p>I have been going through the <a href="http://www.sec.gov/comments/s7-08-10/s70810-89.pdf">comments submitted</a> to the US Securities and Exchange Commission.</p>  <p>I feel like I have to add my 2 cents on it. My first <em>impression </em>is that the analysis was not performed in full and the authors are being very affiliated with a company (which seems to be Microsoft).</p>  <p>One and most important issue with this document is that authors do not seem to fully understand the dynamic languages and they have not even taken into account (possibly) the most suited language for the task – <a href="http://www.ruby-lang.org/">Ruby</a>. Of course I may be wrong.</p>  <p>I have to say that I have nothing against authors or anything like that.</p>  <p>My point is that <em>I believe</em> that the analysis could have been performed more deeply with close interaction with professionals of the particular languages.</p>  <p>So now, I would like to comment on the submission:</p>  <blockquote>   <p>Safe execution of code written by one party on a machine owned by a different party was not a strong concern in the design of Python. It was a strong concern in the design of other systems, including Java and the .Net framework</p> </blockquote>  <p>This is neither sufficient nor necessary to achieve the security. The security is the effort of the developers, IT administrators and the people working with the system. Even when using an interpreted language it can be executed inside a virtual machine (be it JVM, .NET, SmallTalk etc) providing that sandbox mentioned above. Most common examples are – Jython, IronPython, JRuby, IronRuby etc. This cannot be served as a decision point.</p>  <blockquote>   <p>A domain-specific language would support writing waterfall programs that are shorter and easier to read, and should help ensure consistency between the program and the narrative description.</p> </blockquote>  <p>This is exactly what Ruby, Python and other dynamic languages are good at. And this is exactly what C#, Java and other static typed languages are bad at. Not sure why having it as a crucial requirements the wrong tool for the job is advocated.</p>  <blockquote>   <p><strong>Efficiency</strong>. … Java, C#, and F# are designed to be executed efficiently, Python and Perl implementations are significantly less efficient.</p> </blockquote>  <p>This is true in many cases. But having the requirements in mind, the language inefficiency can be compensated with additional hardware. Its cost is significantly less than the cost of development time using strongly/statically typed languages.    <br />If additional performance needed – then the just-in-time compiler can be used instead of interpretation (this includes Rubinius, IronRuby, JRuby, MacRuby etc)</p>  <blockquote>   <p><strong>Typing</strong>. Statically typed languages are generally considered to produce more reliable and easier to maintain code, while dynamically typed languages are generally considered to produce more flexible code and to be better suited for prototyping. Java, C#, F# are statically typed; Python and Perl are dynamically typed.</p> </blockquote>  <p>This can phrase exactly the other way around and is neither sufficient nor necessary to achieve supportability.</p>  <p>The wording is rather weird here:&#160; “<em>…languages are .. considered to produce more reliable and easier to maintain code</em>”. The languages do NOT produce code. It is a developer who does it.</p>  <blockquote>   <p><strong>Security</strong>. Some programming languages have been designed with security in mind, and some of their implementations include “sandboxes” that can securely execute untrusted code. Java, C#, and F# are such languages; Python and Perl are not.</p> </blockquote>  <p>As I mentioned above it cannot be the the deciding point because most of the dynamically typed languages can be easily run inside that sandbox using either a JVM, JIT or just a virtual machine; also sandboxing in the sense above does not eliminate the security issues. And we have a <a href="http://weblogs.asp.net/scottgu/archive/2010/09/18/important-asp-net-security-vulnerability.aspx">fairly recent example</a> of that.</p>  <blockquote>   <p><strong>Domain-specific languages</strong>. Any programming language can serve as a basis for a domain-specific language by augmenting it with suitable libraries. Experience seems to show that higher-order programming languages such as F# provide a particularly good basis for domain-specific languages. There are financial domain-specific languages available in F#.</p> </blockquote>  <p>I don’t understand why F# is the only recommendation here. Ruby is one of the greatest languages to produce DSLs. Clojure may also be considered. For that matter Martin Fowler’s Domain Specific Languages book can be used as the starting point.</p>  <p>&#160;</p>  <p>I do advocate Ruby language here and believe it can be used with a great success. Only one huge disadvantage of it is the absence of a formal specification (which in my opinion is the advantage as it allows better evolution of the language).</p>  <p>And of course there are many factors that have to be taken into account that may roll Ruby out, but it must be considered at least.</p>  <p>Additionally inviting professionals from Ruby, Python, Perl communities to suggest on the subject will provide much more information and will allow making an informative decision.</p>  </div>

]]></content>
  </entry>
  
</feed>
