<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: DevTools | My Octopress Blog]]></title>
  <link href="http://dnagir.github.com/dnagir/blog/categories/devtools/atom.xml" rel="self"/>
  <link href="http://dnagir.github.com/dnagir/"/>
  <updated>2012-02-08T21:10:33+11:00</updated>
  <id>http://dnagir.github.com/dnagir/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[KnockoutJS Validations Screencast]]></title>
    <link href="http://dnagir.github.com/dnagir/blog/2011/12/22/knockoutjs-validations-video/"/>
    <updated>2011-12-22T20:31:00+11:00</updated>
    <id>http://dnagir.github.com/dnagir/blog/2011/12/22/knockoutjs-validations-video</id>
    <content type="html"><![CDATA[<div class='post'>
<div>
If you wonder how you can use KnockoutJS with Rails in a similar way to Backbone.js or Spine.js then <a href="http://www.youtube.com/watch?v=cJzQl-bpmUI">watch the video</a>. It also shows how easy it is to apply client side validations that work alongsite with the server-side validations.<br />
<br />

<iframe width="560" height="315" src="http://www.youtube.com/embed/cJzQl-bpmUI?hd=1" frameborder="0" allowfullscreen></iframe>

<div>
Have a look at the <a href="https://github.com/dnagir/knockout-rails">knockout-rails</a> project for more details.
</div>

</div></div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Dmytrii Nagirniak</div>
<div class='content'>
This is actually <a href="https://gist.github.com/9ca5dce0524927d69655" rel="nofollow">one of the options</a> of validating in the background: <br /><br />It doesn&#39;t include the bindings, but gives idea how it can be done. Easier than I thought actually.</div>
</div>
<div class='comment'>
<div class='author'>Dmytrii Nagirniak</div>
<div class='content'>
Pre-validating on the server can technically be done with the Model Events. But it&#39;s not supported out of the box.<br /><br />It is a good idea, but there&#39;s a bit more complexity involved on both client and server. But I&#39;ll gladly accept pull requests to knockout-rails if somebody needs to support that.</div>
</div>
<div class='comment'>
<div class='author'>Aleksey Gureiev</div>
<div class='content'>
This comment has been removed by the author.</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Issues switching to JRuby from MRI 1.9]]></title>
    <link href="http://dnagir.github.com/dnagir/blog/2011/11/29/issues-switching-to-jruby-from-mri-19/"/>
    <updated>2011-11-29T11:51:00+11:00</updated>
    <id>http://dnagir.github.com/dnagir/blog/2011/11/29/issues-switching-to-jruby-from-mri-19</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">
<b>UDPATE</b>: The reason for switching to JRuby the native neo4j API. Have to use REST API with MRI.<br />
<br />
This is just a quick recap of what issues I have had trying to switch existing app from MRI Ruby (1.9.3) to JRuby (1.6.4).<br />
<br />
Unfortunately I stepped back and didn't want to spend more time as it felt an unbreakable chain of issues. Resolving one, you think "huh, awesome". But very soon you hit the next.<br />
And I couldn't see it stopping.<br />
<br />
<b>But PLEASE bear in mind</b> that I only spent a couple of hours on that. With a little bit more persistence, you may be able to the end of the tunnel.<br />
<br />
The overall impression is that it is not a big deal really. The problems arise when trying to use other libraries. And unfortunately, not all of the gems <b>care deep enough to support JRuby</b>. And this is the biggest issue in my opinion, there are very little issues with JRuby itself. The transition (from the syntax perspective) was extremely easy.<br />
<br />
The application is pretty standard Rails 3.1 app that uses gems like Dragonfly, inherited_resources, cancan, paper_trail, Authlogic, CoffeeScript, Haml, Sass, Formtastic etc. For testing - things like rspec-rails, cucumber-rails, capybara-webkit, guard (rspec and cucumber), database_cleaner etc.<br />
<br />
So here is a quick list of the things that I faced on my way.<br />
<br />
Before everything else I enabled support for 1.9 syntax in JRuby (export JRUBY_OPTS=--1.9).<br />
<br />
It all first started with <a href="https://gist.github.com/1402753">the weird issue</a> where the <b>wrong arguments were passed to RSpec shared example</b>.<br />
Unfortunately I did not figure out why it happened and just patched it as you can see in the comments there.<br />
<script src="https://gist.github.com/1402753.js?file=sample_spec.rb">
</script>

<br />
<br />
<br />
After fixing this issue I had another one related to <b>database_cleaner</b>. So I ended up with a <a href="https://github.com/bmabey/database_cleaner/pull/83">pull request</a> that worked for me.<br />
<br />
The other issue was a<b> huge stack trace</b>. I scrolled 3 pages in the terminal to get to the top. Most of that stack trace is deep inside Java. Additionally I got <b>wrong line number</b> on exception. This "features/step_definitions/company_steps.rb:234" makes me thing that the exception is at line 234. But that file only had 49 lines of code. Now, go figure.<br />
<br />
Going on... <a href="https://github.com/colszowka/simplecov">SimpleCov</a> gem didn't work out of the box and gave the warning that I need to enable debugging. That's fine and understandable. But after half an hour of debugging of unrelated exception, it turned out that <b>SimpleCove threw an exception</b> because of that. So had to go and explicitly disable it.<br />
<br />
Then I managed to run all of my specs. But I was pretty surprised how <b>slow</b> it was:<br />
<pre><code>
# rvm use 1.9.3
# time rspec # real=14s, rspec time ~ 12s

# rvm use jruby
# time rspec # real=52s, rspec time ~ 30s

</code>
</pre>
But this is expected as JRuby doesn't have enough time to optimise here. It should be much better in production. But it will be also shit slow after deployment.<br />
Ok. That's fine. <b>I can trust it's fast</b>.<br />
<br />
Then I tried running the cucumber specs and had to file the <a href="http://jira.codehaus.org/browse/JRUBY-6237">issue</a> to support <b>new Ruby 1.9.3 syntax</b> (a = b = f 1). Not a big deal, easily fixed with parens: a = b = f(1).<br />
<br />
Next and the <b>final issue</b> - I could not run the <b>headless cucumber specs</b> (capybara-webkit). It just got stuck (no CPU used) and feels like there is a <b>dead-lock</b> or something similar.<br />
<br />
I couldn't see way of fixing it easily and decided that for now I am <b>done with</b> it. So going <b>back to Ruby 1.9.3</b>.<br />
<br />
<br />
<b>To summarise</b>, I <b>did not feel like it's a problem</b> to switch to JRuby. But it's really a <b>big deal to actually use</b> it due to the number of <b>C extensions</b> that JRuby doesn't really support.<br />
<br />
Again, to emphasise, there is nothing horribly wrong with JRuby and it seems to be pretty good. But the real showstoppers are the C extensions.</div></div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Dmytrii Nagirniak</div>
<div class='content'>
Totally with you on this. But real world seems to be a bit different :)</div>
</div>
<div class='comment'>
<div class='author'>Postmodern</div>
<div class='content'>
Yet another reason to avoid C-extensions. When selecting dependencies for a new project, I prefer to select pure-Ruby libraries or FFI bindings (https://github.com/ffi/ffi#readme). Pure-Ruby libraries should be faster on Rubinius/JRuby. FFI bindings work perfectly on both MRI and JRuby.<br /><br />If developers want faster Ruby code, they should help make MRI faster (or switch to Rubinius/JRuby), instead of writing more code in C.</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Securities and Exchange Commission – comment on comment]]></title>
    <link href="http://dnagir.github.com/dnagir/blog/2010/10/19/securities-and-exchange-commission/"/>
    <updated>2010-10-19T10:30:00+11:00</updated>
    <id>http://dnagir.github.com/dnagir/blog/2010/10/19/securities-and-exchange-commission</id>
    <content type="html"><![CDATA[<div class='post'>
<p>I have been going through the <a href="http://www.sec.gov/comments/s7-08-10/s70810-89.pdf">comments submitted</a> to the US Securities and Exchange Commission.</p>  <p>I feel like I have to add my 2 cents on it. My first <em>impression </em>is that the analysis was not performed in full and the authors are being very affiliated with a company (which seems to be Microsoft).</p>  <p>One and most important issue with this document is that authors do not seem to fully understand the dynamic languages and they have not even taken into account (possibly) the most suited language for the task – <a href="http://www.ruby-lang.org/">Ruby</a>. Of course I may be wrong.</p>  <p>I have to say that I have nothing against authors or anything like that.</p>  <p>My point is that <em>I believe</em> that the analysis could have been performed more deeply with close interaction with professionals of the particular languages.</p>  <p>So now, I would like to comment on the submission:</p>  <blockquote>   <p>Safe execution of code written by one party on a machine owned by a different party was not a strong concern in the design of Python. It was a strong concern in the design of other systems, including Java and the .Net framework</p> </blockquote>  <p>This is neither sufficient nor necessary to achieve the security. The security is the effort of the developers, IT administrators and the people working with the system. Even when using an interpreted language it can be executed inside a virtual machine (be it JVM, .NET, SmallTalk etc) providing that sandbox mentioned above. Most common examples are – Jython, IronPython, JRuby, IronRuby etc. This cannot be served as a decision point.</p>  <blockquote>   <p>A domain-specific language would support writing waterfall programs that are shorter and easier to read, and should help ensure consistency between the program and the narrative description.</p> </blockquote>  <p>This is exactly what Ruby, Python and other dynamic languages are good at. And this is exactly what C#, Java and other static typed languages are bad at. Not sure why having it as a crucial requirements the wrong tool for the job is advocated.</p>  <blockquote>   <p><strong>Efficiency</strong>. … Java, C#, and F# are designed to be executed efficiently, Python and Perl implementations are significantly less efficient.</p> </blockquote>  <p>This is true in many cases. But having the requirements in mind, the language inefficiency can be compensated with additional hardware. Its cost is significantly less than the cost of development time using strongly/statically typed languages.    <br />If additional performance needed – then the just-in-time compiler can be used instead of interpretation (this includes Rubinius, IronRuby, JRuby, MacRuby etc)</p>  <blockquote>   <p><strong>Typing</strong>. Statically typed languages are generally considered to produce more reliable and easier to maintain code, while dynamically typed languages are generally considered to produce more flexible code and to be better suited for prototyping. Java, C#, F# are statically typed; Python and Perl are dynamically typed.</p> </blockquote>  <p>This can phrase exactly the other way around and is neither sufficient nor necessary to achieve supportability.</p>  <p>The wording is rather weird here:&#160; “<em>…languages are .. considered to produce more reliable and easier to maintain code</em>”. The languages do NOT produce code. It is a developer who does it.</p>  <blockquote>   <p><strong>Security</strong>. Some programming languages have been designed with security in mind, and some of their implementations include “sandboxes” that can securely execute untrusted code. Java, C#, and F# are such languages; Python and Perl are not.</p> </blockquote>  <p>As I mentioned above it cannot be the the deciding point because most of the dynamically typed languages can be easily run inside that sandbox using either a JVM, JIT or just a virtual machine; also sandboxing in the sense above does not eliminate the security issues. And we have a <a href="http://weblogs.asp.net/scottgu/archive/2010/09/18/important-asp-net-security-vulnerability.aspx">fairly recent example</a> of that.</p>  <blockquote>   <p><strong>Domain-specific languages</strong>. Any programming language can serve as a basis for a domain-specific language by augmenting it with suitable libraries. Experience seems to show that higher-order programming languages such as F# provide a particularly good basis for domain-specific languages. There are financial domain-specific languages available in F#.</p> </blockquote>  <p>I don’t understand why F# is the only recommendation here. Ruby is one of the greatest languages to produce DSLs. Clojure may also be considered. For that matter Martin Fowler’s Domain Specific Languages book can be used as the starting point.</p>  <p>&#160;</p>  <p>I do advocate Ruby language here and believe it can be used with a great success. Only one huge disadvantage of it is the absence of a formal specification (which in my opinion is the advantage as it allows better evolution of the language).</p>  <p>And of course there are many factors that have to be taken into account that may roll Ruby out, but it must be considered at least.</p>  <p>Additionally inviting professionals from Ruby, Python, Perl communities to suggest on the subject will provide much more information and will allow making an informative decision.</p>  </div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vici MVC – simple .NET implementation]]></title>
    <link href="http://dnagir.github.com/dnagir/blog/2009/11/02/vici-mvc-simple-net-implemetation/"/>
    <updated>2009-11-02T15:02:00+11:00</updated>
    <id>http://dnagir.github.com/dnagir/blog/2009/11/02/vici-mvc-simple-net-implemetation</id>
    <content type="html"><![CDATA[<div class='post'>
I have found the <a href="http://viciproject.com/wiki/projects/mvc/home" target="_blank">ViciMVC</a> project and it caught my interest. What I can observe – it is really simple implementation of the MVC pattern for .NET (ASP.NET).<br />
The key points I should mention about it are:<br />
<ul>
<li>It is very lightweight.</li>
<li>It is very similar to Castle MonoRail and ASP.NET MVC.</li>
<li>It has its own, HTML based view engine which is based on their own <a href="http://viciproject.com/wiki/projects/parser/home" target="_blank">Vici parser</a>. The parser looks really great and allows to run C# code in it. Good work.</li>
<li>Unit testing is not bound to the HttpContext (as we all would expect) AND (this is huge for me) allow to render the resulting html so unit tests can just access raw output produced by the action.</li>
</ul>
The guys just did <b>what they want and how they want</b>. Great work overall.<br />
I just must mention the ViciProject. The tools are great. Simple, lightweight and looks like easy to use.</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ASP.NET MVC Most annoying issues]]></title>
    <link href="http://dnagir.github.com/dnagir/blog/2009/09/29/aspnet-mvc-most-annoying-issues/"/>
    <updated>2009-09-29T13:16:00+10:00</updated>
    <id>http://dnagir.github.com/dnagir/blog/2009/09/29/aspnet-mvc-most-annoying-issues</id>
    <content type="html"><![CDATA[<div class='post'>
<ul>
<li>No support for SSL in routing&nbsp; (no URL generation configured in a single place). One big hack is <a href="http://dnagir.blogspot.com/2008/08/fixing-https-support-in-aspnet-mvc.html">here</a>.</li>
<li>No support for (non)SSL redirect using RedirectToRoute (so it is not possible to redirect to (non)SSL page from controller action, except generating absolute link manually). </li>
<li>HttpExeption is handled as any other one except if its Code is 404. Inconsistent. But is “as designed” in ASP.NET generally (FTW again). </li>
<li>It reuses interface of the HttpContext class just acting as a proxy (HttpContextBase). Thus it inherits all the issues it has. It had to be different interface that abstracts from HttpContext (in particular the ApplicationPath’s trailing slash issue). </li>
<li>No support for Fragment part of URL in routing. </li>
<li>Weird ValueProvider – sometimes its value is array, sometimes string. The <a href="http://dnagir.blogspot.com/2009/01/aspnet-mvc-request-valueproviderresult.html">behaviour is consistent</a>, but not naturally understandable. Have to wrap all that stuff with my own utility to unwrap that. </li>
<li><a href="http://dnagir.blogspot.com/2009/04/nullreferenceexception-accessing-aspnet.html">NullReferenceException occurs</a> accessing routes if not properly used. </li>
<li>Annoying RenderPartial with model. <a href="http://dnagir.blogspot.com/2009/05/aspnet-mvc-renderpartial-with-null.html">Has to create a new ViewDataDictionary</a>. </li>
<li><a href="http://dnagir.blogspot.com/2009/09/aspnet-mvc-empty-values-and-string.html">Empty values are used instead of NULLs</a>. By default if user leaves a field blank (non-mandatory) empty string is bound to the property. It will be fixed in MVC2. </li>
<li>In <b>reality</b>, rarely you can use the typed C# 3.5 syntax for routing MvcContrib fixes that and I <a href="http://dnagir.blogspot.com/2008/05/annoying-untyped-redirects-in-aspnet.html">did</a> it. </li>
<li>The default data binding <a href="http://dnagir.blogspot.com/2008/03/mvc-concerns-databinding-and-security.html">is NOT secure</a> and it is often encouraged. This also applies to Castle MonoRail. To protect it we need to specify white-list (which leads to another problem) or use ViewModel/DTO (which I do) and thus write more code. </li>
<li>The white-list of databinding properties is array of STRINGS. No type sefety. I write my wrapper to convert Expression&lt;Func&gt; to string. Fixing and patching again. </li>
</ul>
And this is the list I only remember now…<br />
Generally the idea behind ASP.NET MVC is great. Even <a href="http://dnagir.blogspot.com/2008/03/mvc-controller-action-return-values.html">one of my ideas had been implemented</a> in it.<br />
But the delivered implementation has to be patched and wrapped with your own utils. Only after that it can be used consistently.<br />
I am using ASP.NET MVC for about half a year or so and I still do prefer it instead of WebForms. Probably I just had to choose <a href="http://www.castleproject.org/MonoRail/" target="_blank">Castle MonoRail</a>. I have never used it, only looked around, read blogs and looked into code samples, but it seems to be a bit more mature. It probably has less “features” (one is worth noting - routing), but I believe it at least performs consistently everywhere.<br />
I am just so tired of patching, wrapping, extending, fixing all the Microsoft things…<br />
I probably just need to go to holidays for a while to cool down a bit.<br />
I should also mention the most positive tools I used with ASP.NET MVC:<br />
<ul>
<li><a href="http://www.codeplex.com/MVCContrib/Wiki/View.aspx?title=Grid" target="_blank">MvcContrib’s grid</a>. </li>
<li><a href="http://code.google.com/p/nhaml/" target="_blank">NHAML</a> view engine – this is a real relief. I don't even need the previous “tool” with it. Such a <i>times and mood</i> saver. It sill has some things I am missing heavily:       <br />
<ul>
<li><a href="http://code.google.com/p/nhaml/issues/detail?id=56" target="_blank">parameterised partial</a> views; </li>
<li><a href="http://code.google.com/p/nhaml/issues/detail?id=5" target="_blank">multiple content placeholders</a>; </li>
<li>intellisence support; </li>
</ul>
</li>
</ul>
<b>I do encourage you to contribute to NHAMl in any possible way. </b><a href="http://dnagir.blogspot.com/2009/07/nhaml-impressions.html"><b>That is a real thing</b></a><b>.</b><br />
<hr />
<b>Ohh. And I have a great idea. Let’s rewrite all the tools we find <i>design </i>issues in? Huh?</b><br />
Are you brave enough to tell that?<br />
…hmm… <i>I</i> am probably <i>not</i>.     <br />Though I want to.</div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>ds r4</div>
<div class='content'>
that SSL certification problem is such annoying. It gets problemetic even if you change the browser.</div>
</div>
<div class='comment'>
<div class='author'>Dmytrii Nagirniak</div>
<div class='content'>
Upps. Sorry. I really thought fragment IS sent to server as part of the URL.<br /><br />Well, then there is really no way we can get the fragment on the server. But it should still be possible to generate the fragment so it can be used on the client.</div>
</div>
<div class='comment'>
<div class='author'>Haacked</div>
<div class='content'>
That&#39;s not the case at all. Try the following experiment. Open up Fiddler2. In your browser, type in any URL with a URL fragment. For example, I chose http://haacked.com/default.aspx#foo<br /><br />Fiddler shows the following request being made:<br /><br />  GET /default.aspx HTTP/1.1<br /><br />Notice that #foo is not included as part of the request.<br /><br />Check out the Wikipedia entry on &quot;Fragment identifier&quot; which states: http://en.wikipedia.org/wiki/Fragment_identifier<br /><br />&quot;The fragment identifier functions differently than the rest of the URI: namely, its processing is exclusively client-side with no participation from the server.&quot;</div>
</div>
<div class='comment'>
<div class='author'>Dmytrii Nagirniak</div>
<div class='content'>
Hello Phil,<br /><br />For the Fragment, it is part of the URL and is sent to the server and thus can be used. Not too sure what you mean.<br /><br />Ideally the the fragment part shuold be defined as part of the route:<br />&quot;{controller}/{id}/{action}#{fragment}&quot;<br /><br />So the &#39;#&#39; should be taken into account when it is absent when matching/generating routes. So that all of the follwoing URL will match the route:<br />Product/123/List<br />Product/123/List#actions<br />Product/123/List?page=5#actions</div>
</div>
<div class='comment'>
<div class='author'>Haacked</div>
<div class='content'>
Thanks for the feedback. Regarding the Fragment part in URL Routing, how could we support that? The URL fragment is *not sent to the server*. <br /><br />The fragment is interpreted by the browser and is not sent over HTTP to the server.</div>
</div>
</div>

]]></content>
  </entry>
  
</feed>
